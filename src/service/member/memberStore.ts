/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Member API
 * isd / kinder board api doc
 * OpenAPI spec version: v1.1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  AccountJoinWithPhoneRequest,
  AccountPasswordChangeRequest,
  AccountPasswordChangeRequestForOpen,
  AccountUpdateRequestV2,
  AccountWithdrawRequest,
  ApiResponseAccountResultV2,
  ApiResponseAuthSessionResult,
  ApiResponseBoolean,
  ApiResponseEducationalClassResult,
  ApiResponseInvitationResult,
  ApiResponseInvitationV2Result,
  ApiResponseListDouble,
  ApiResponseListEducationalClassResult,
  ApiResponseListFollowResult,
  ApiResponseListProfileResult,
  ApiResponseListStudentFaceVectorResult,
  ApiResponseListStudentResult,
  ApiResponseProfileResult,
  ApiResponseString,
  ApiResponseStudentFaceVectorResult,
  ApiResponseStudentResult,
  EducationalClassAddRequest,
  EducationalClassUpdateRequest,
  FollowRequest,
  ForceUnfollowRequest,
  GetAllFollowersParams,
  GetAllFollowingsParams,
  GetBasicEducationalClassParams,
  GetByIdOrCode1Params,
  GetByIdParams,
  GetByPhoneNumber1Params,
  GetByPhoneNumberParams,
  GetEducationalClassByIdParams,
  GetEducationalClassesParams,
  GetEveryStudentsParams,
  GetFaceVectorParams,
  GetStudentFaceVectorListParams,
  GetStudentParams,
  GetStudentsParams,
  MyBoardBannerUpdateRequest,
  ProfileModifyBioRequest,
  ProfileModifyPhotoRequest,
  ProfilesByCodesRequest,
  ProfilesByIdsRequest,
  RefreshAuthSessionRequest,
  SignInRequest,
  SignInWithPhoneRequest,
  StartedWithName1Params,
  StartedWithNameParams,
  StudentAddRequest,
  StudentMoveRequest,
  StudentUpdateRequest,
  StudentVectorAddRequest,
  StudentVectorDeleteRequest,
  StudentVectorUpdateRequest,
  UnfollowRequest,
} from './schemas';
import { customFetcher } from '../custom-fetcher';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î≥ÄÍ≤ΩÌïòÎäî api ÏûÖÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
 */
export const changePassword = (
  accountId: string,
  accountPasswordChangeRequest: AccountPasswordChangeRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/v2/accounts/${accountId}/password`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: accountPasswordChangeRequest,
    },
    options,
  );
};

export const getChangePasswordMutationOptions = <
  TData = Awaited<ReturnType<typeof changePassword>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { accountId: string; data: AccountPasswordChangeRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['changePassword'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { accountId: string; data: AccountPasswordChangeRequest }
  > = (props) => {
    const { accountId, data } = props ?? {};

    return changePassword(accountId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { accountId: string; data: AccountPasswordChangeRequest },
    TContext
  >;
};

export type ChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changePassword>>>;
export type ChangePasswordMutationBody = AccountPasswordChangeRequest;
export type ChangePasswordMutationError = unknown;

/**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
 */
export const useChangePassword = <
  TData = Awaited<ReturnType<typeof changePassword>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { accountId: string; data: AccountPasswordChangeRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { accountId: string; data: AccountPasswordChangeRequest }, TContext> => {
  const mutationOptions = getChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌöåÏõê Î∞è ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÌöåÏõê+ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const updateAccountInfo = (
  accountId: string,
  accountUpdateRequestV2: AccountUpdateRequestV2,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseAccountResultV2>(
    {
      url: `/member/v2/account/${accountId}/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: accountUpdateRequestV2,
    },
    options,
  );
};

export const getUpdateAccountInfoMutationOptions = <
  TData = Awaited<ReturnType<typeof updateAccountInfo>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { accountId: string; data: AccountUpdateRequestV2 }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['updateAccountInfo'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAccountInfo>>,
    { accountId: string; data: AccountUpdateRequestV2 }
  > = (props) => {
    const { accountId, data } = props ?? {};

    return updateAccountInfo(accountId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { accountId: string; data: AccountUpdateRequestV2 },
    TContext
  >;
};

export type UpdateAccountInfoMutationResult = NonNullable<Awaited<ReturnType<typeof updateAccountInfo>>>;
export type UpdateAccountInfoMutationBody = AccountUpdateRequestV2;
export type UpdateAccountInfoMutationError = unknown;

/**
 * @summary ÌöåÏõê+ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const useUpdateAccountInfo = <
  TData = Awaited<ReturnType<typeof updateAccountInfo>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { accountId: string; data: AccountUpdateRequestV2 }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { accountId: string; data: AccountUpdateRequestV2 }, TContext> => {
  const mutationOptions = getUpdateAccountInfoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌïôÏÉù ÏïÑÏù¥ÎîîÎ°ú Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ Ï°∞Ìöå
 */
export const getStudent = (
  studentId: number,
  params?: GetStudentParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseStudentResult>(
    { url: `/member/v1/student/${studentId}`, method: 'GET', params, signal },
    options,
  );
};

export const getGetStudentQueryKey = (studentId: number, params?: GetStudentParams) => {
  return [`/member/v1/student/${studentId}`, ...(params ? [params] : [])] as const;
};

export const getGetStudentQueryOptions = <TData = Awaited<ReturnType<typeof getStudent>>, TError = unknown>(
  studentId: number,
  params?: GetStudentParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudentQueryKey(studentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudent>>> = ({ signal }) =>
    getStudent(studentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!studentId, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStudent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetStudentQueryResult = NonNullable<Awaited<ReturnType<typeof getStudent>>>;
export type GetStudentQueryError = unknown;

export function useGetStudent<TData = Awaited<ReturnType<typeof getStudent>>, TError = unknown>(
  studentId: number,
  params: undefined | GetStudentParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudent<TData = Awaited<ReturnType<typeof getStudent>>, TError = unknown>(
  studentId: number,
  params?: GetStudentParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudent<TData = Awaited<ReturnType<typeof getStudent>>, TError = unknown>(
  studentId: number,
  params?: GetStudentParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetStudent<TData = Awaited<ReturnType<typeof getStudent>>, TError = unknown>(
  studentId: number,
  params?: GetStudentParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetStudentQueryOptions(studentId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌïôÏÉù Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏàòÏ†ï
 */
export const updateStudent = (
  studentId: number,
  studentUpdateRequest: StudentUpdateRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseStudentResult>(
    {
      url: `/member/v1/student/${studentId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: studentUpdateRequest,
    },
    options,
  );
};

export const getUpdateStudentMutationOptions = <
  TData = Awaited<ReturnType<typeof updateStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { studentId: number; data: StudentUpdateRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['updateStudent'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStudent>>,
    { studentId: number; data: StudentUpdateRequest }
  > = (props) => {
    const { studentId, data } = props ?? {};

    return updateStudent(studentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { studentId: number; data: StudentUpdateRequest },
    TContext
  >;
};

export type UpdateStudentMutationResult = NonNullable<Awaited<ReturnType<typeof updateStudent>>>;
export type UpdateStudentMutationBody = StudentUpdateRequest;
export type UpdateStudentMutationError = unknown;

/**
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏàòÏ†ï
 */
export const useUpdateStudent = <
  TData = Awaited<ReturnType<typeof updateStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { studentId: number; data: StudentUpdateRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { studentId: number; data: StudentUpdateRequest }, TContext> => {
  const mutationOptions = getUpdateStudentMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌïôÏÉù Ï†ïÎ≥¥Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const deleteStudent = (studentId: number, options?: SecondParameter<typeof customFetcher>) => {
  return customFetcher<ApiResponseString>({ url: `/member/v1/student/${studentId}`, method: 'DELETE' }, options);
};

export const getDeleteStudentMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { studentId: number }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['deleteStudent'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStudent>>, { studentId: number }> = (props) => {
    const { studentId } = props ?? {};

    return deleteStudent(studentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { studentId: number }, TContext>;
};

export type DeleteStudentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStudent>>>;

export type DeleteStudentMutationError = unknown;

/**
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const useDeleteStudent = <
  TData = Awaited<ReturnType<typeof deleteStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { studentId: number }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { studentId: number }, TContext> => {
  const mutationOptions = getDeleteStudentMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌïôÏÉùÏùÑ Îã§Î•∏ Î∞òÏúºÎ°ú Ïù¥ÎèôÏãúÌÇµÎãàÎã§.
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ Ïù¥Îèô
 */
export const moveStudent = (
  studentId: number,
  studentMoveRequest: StudentMoveRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseEducationalClassResult>(
    {
      url: `/member/v1/student/${studentId}/move-class`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: studentMoveRequest,
    },
    options,
  );
};

export const getMoveStudentMutationOptions = <
  TData = Awaited<ReturnType<typeof moveStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { studentId: number; data: StudentMoveRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['moveStudent'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof moveStudent>>,
    { studentId: number; data: StudentMoveRequest }
  > = (props) => {
    const { studentId, data } = props ?? {};

    return moveStudent(studentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { studentId: number; data: StudentMoveRequest },
    TContext
  >;
};

export type MoveStudentMutationResult = NonNullable<Awaited<ReturnType<typeof moveStudent>>>;
export type MoveStudentMutationBody = StudentMoveRequest;
export type MoveStudentMutationError = unknown;

/**
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ Ïù¥Îèô
 */
export const useMoveStudent = <
  TData = Awaited<ReturnType<typeof moveStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { studentId: number; data: StudentMoveRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { studentId: number; data: StudentMoveRequest }, TContext> => {
  const mutationOptions = getMoveStudentMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌïôÏÉùÏùò Î≤°ÌÑ∞ Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Î≤°ÌÑ∞ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const updateStudent1 = (
  studentVectorUpdateRequest: StudentVectorUpdateRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseStudentFaceVectorResult>(
    {
      url: `/member/v1/student-feature-vector/`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: studentVectorUpdateRequest,
    },
    options,
  );
};

export const getUpdateStudent1MutationOptions = <
  TData = Awaited<ReturnType<typeof updateStudent1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: StudentVectorUpdateRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['updateStudent1'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStudent1>>,
    { data: StudentVectorUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateStudent1(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: StudentVectorUpdateRequest },
    TContext
  >;
};

export type UpdateStudent1MutationResult = NonNullable<Awaited<ReturnType<typeof updateStudent1>>>;
export type UpdateStudent1MutationBody = StudentVectorUpdateRequest;
export type UpdateStudent1MutationError = unknown;

/**
 * @summary Î≤°ÌÑ∞ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const useUpdateStudent1 = <
  TData = Awaited<ReturnType<typeof updateStudent1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: StudentVectorUpdateRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: StudentVectorUpdateRequest }, TContext> => {
  const mutationOptions = getUpdateStudent1MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Î≤°ÌÑ∞Ï†ïÎ≥¥Î•º ÏÉàÎ°ú Îì±Î°ùÌï©ÎãàÎã§. idÎäî ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï¥ÏÑú Î∞òÌôòÌï©ÎãàÎã§.
 * @summary Î≤°ÌÑ∞ Ï†ïÎ≥¥ Îì±Î°ù
 */
export const createVector = (
  studentVectorAddRequest: StudentVectorAddRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseStudentFaceVectorResult>(
    {
      url: `/member/v1/student-feature-vector/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: studentVectorAddRequest,
      signal,
    },
    options,
  );
};

export const getCreateVectorMutationOptions = <
  TData = Awaited<ReturnType<typeof createVector>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: StudentVectorAddRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['createVector'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createVector>>, { data: StudentVectorAddRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createVector(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: StudentVectorAddRequest },
    TContext
  >;
};

export type CreateVectorMutationResult = NonNullable<Awaited<ReturnType<typeof createVector>>>;
export type CreateVectorMutationBody = StudentVectorAddRequest;
export type CreateVectorMutationError = unknown;

/**
 * @summary Î≤°ÌÑ∞ Ï†ïÎ≥¥ Îì±Î°ù
 */
export const useCreateVector = <
  TData = Awaited<ReturnType<typeof createVector>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: StudentVectorAddRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: StudentVectorAddRequest }, TContext> => {
  const mutationOptions = getCreateVectorMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌïôÏÉù Ï†ïÎ≥¥Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const deleteStudent1 = (
  studentVectorDeleteRequest: StudentVectorDeleteRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseBoolean>(
    {
      url: `/member/v1/student-feature-vector/`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: studentVectorDeleteRequest,
    },
    options,
  );
};

export const getDeleteStudent1MutationOptions = <
  TData = Awaited<ReturnType<typeof deleteStudent1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: StudentVectorDeleteRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['deleteStudent1'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteStudent1>>,
    { data: StudentVectorDeleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteStudent1(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: StudentVectorDeleteRequest },
    TContext
  >;
};

export type DeleteStudent1MutationResult = NonNullable<Awaited<ReturnType<typeof deleteStudent1>>>;
export type DeleteStudent1MutationBody = StudentVectorDeleteRequest;
export type DeleteStudent1MutationError = unknown;

/**
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const useDeleteStudent1 = <
  TData = Awaited<ReturnType<typeof deleteStudent1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: StudentVectorDeleteRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: StudentVectorDeleteRequest }, TContext> => {
  const mutationOptions = getDeleteStudent1MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌïòÍ≥†, ÏóÖÎ°úÎìú ÏôÑÎ£åÌïú fileObjectÏùò idÎ°ú ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏùÑ Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Îì±Î°ù(Î≥ÄÍ≤Ω)
 */
export const modifyPhoto = (
  profileIdOrCode: string,
  profileModifyPhotoRequest: ProfileModifyPhotoRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseProfileResult>(
    {
      url: `/member/v1/profiles/${profileIdOrCode}/photo`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: profileModifyPhotoRequest,
    },
    options,
  );
};

export const getModifyPhotoMutationOptions = <
  TData = Awaited<ReturnType<typeof modifyPhoto>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: ProfileModifyPhotoRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['modifyPhoto'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyPhoto>>,
    { profileIdOrCode: string; data: ProfileModifyPhotoRequest }
  > = (props) => {
    const { profileIdOrCode, data } = props ?? {};

    return modifyPhoto(profileIdOrCode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { profileIdOrCode: string; data: ProfileModifyPhotoRequest },
    TContext
  >;
};

export type ModifyPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof modifyPhoto>>>;
export type ModifyPhotoMutationBody = ProfileModifyPhotoRequest;
export type ModifyPhotoMutationError = unknown;

/**
 * @summary ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Îì±Î°ù(Î≥ÄÍ≤Ω)
 */
export const useModifyPhoto = <
  TData = Awaited<ReturnType<typeof modifyPhoto>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: ProfileModifyPhotoRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { profileIdOrCode: string; data: ProfileModifyPhotoRequest }, TContext> => {
  const mutationOptions = getModifyPhotoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÏÇ¨Ïö©Ïûê ÏΩîÎìúÎ°ú ÏÜåÍ∞úÍ∏ÄÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÌïÑ ÏÜåÍ∞úÍ∏Ä ÏàòÏ†ï
 */
export const modifyBio = (
  profileCode: string,
  profileModifyBioRequest: ProfileModifyBioRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/v1/profiles/${profileCode}/bio`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: profileModifyBioRequest,
    },
    options,
  );
};

export const getModifyBioMutationOptions = <
  TData = Awaited<ReturnType<typeof modifyBio>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileCode: string; data: ProfileModifyBioRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['modifyBio'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyBio>>,
    { profileCode: string; data: ProfileModifyBioRequest }
  > = (props) => {
    const { profileCode, data } = props ?? {};

    return modifyBio(profileCode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { profileCode: string; data: ProfileModifyBioRequest },
    TContext
  >;
};

export type ModifyBioMutationResult = NonNullable<Awaited<ReturnType<typeof modifyBio>>>;
export type ModifyBioMutationBody = ProfileModifyBioRequest;
export type ModifyBioMutationError = unknown;

/**
 * @summary ÌîÑÎ°úÌïÑ ÏÜåÍ∞úÍ∏Ä ÏàòÏ†ï
 */
export const useModifyBio = <
  TData = Awaited<ReturnType<typeof modifyBio>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileCode: string; data: ProfileModifyBioRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { profileCode: string; data: ProfileModifyBioRequest }, TContext> => {
  const mutationOptions = getModifyBioMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * urlÎ°ú ÎßàÏù¥Î∞∞ÎÑàÏùò Î∞∞Í≤ΩÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§.
 * @summary ÎßàÏù¥Î≥¥Îìú Î∞∞ÎÑà Î≥ÄÍ≤Ω
 */
export const updateMyBoardBanner = (
  myBoardBannerUpdateRequest: MyBoardBannerUpdateRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseProfileResult>(
    {
      url: `/member/v1/profile/banner`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: myBoardBannerUpdateRequest,
    },
    options,
  );
};

export const getUpdateMyBoardBannerMutationOptions = <
  TData = Awaited<ReturnType<typeof updateMyBoardBanner>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: MyBoardBannerUpdateRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['updateMyBoardBanner'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMyBoardBanner>>,
    { data: MyBoardBannerUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateMyBoardBanner(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: MyBoardBannerUpdateRequest },
    TContext
  >;
};

export type UpdateMyBoardBannerMutationResult = NonNullable<Awaited<ReturnType<typeof updateMyBoardBanner>>>;
export type UpdateMyBoardBannerMutationBody = MyBoardBannerUpdateRequest;
export type UpdateMyBoardBannerMutationError = unknown;

/**
 * @summary ÎßàÏù¥Î≥¥Îìú Î∞∞ÎÑà Î≥ÄÍ≤Ω
 */
export const useUpdateMyBoardBanner = <
  TData = Awaited<ReturnType<typeof updateMyBoardBanner>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: MyBoardBannerUpdateRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: MyBoardBannerUpdateRequest }, TContext> => {
  const mutationOptions = getUpdateMyBoardBannerMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Î∞ò Ï†ïÎ≥¥Î•º ÏïÑÏù¥ÎîîÎ°ú Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Î∞ò ÏïÑÏù¥ÎîîÎ°ú Ï°∞Ìöå
 */
export const getEducationalClassById = (
  educationalClassId: number,
  params?: GetEducationalClassByIdParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseEducationalClassResult>(
    { url: `/member/v1/educational-class/${educationalClassId}`, method: 'GET', params, signal },
    options,
  );
};

export const getGetEducationalClassByIdQueryKey = (
  educationalClassId: number,
  params?: GetEducationalClassByIdParams,
) => {
  return [`/member/v1/educational-class/${educationalClassId}`, ...(params ? [params] : [])] as const;
};

export const getGetEducationalClassByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getEducationalClassById>>,
  TError = unknown,
>(
  educationalClassId: number,
  params?: GetEducationalClassByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEducationalClassByIdQueryKey(educationalClassId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEducationalClassById>>> = ({ signal }) =>
    getEducationalClassById(educationalClassId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!educationalClassId, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEducationalClassById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEducationalClassByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEducationalClassById>>>;
export type GetEducationalClassByIdQueryError = unknown;

export function useGetEducationalClassById<
  TData = Awaited<ReturnType<typeof getEducationalClassById>>,
  TError = unknown,
>(
  educationalClassId: number,
  params: undefined | GetEducationalClassByIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalClassById<
  TData = Awaited<ReturnType<typeof getEducationalClassById>>,
  TError = unknown,
>(
  educationalClassId: number,
  params?: GetEducationalClassByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalClassById<
  TData = Awaited<ReturnType<typeof getEducationalClassById>>,
  TError = unknown,
>(
  educationalClassId: number,
  params?: GetEducationalClassByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Î∞ò ÏïÑÏù¥ÎîîÎ°ú Ï°∞Ìöå
 */

export function useGetEducationalClassById<
  TData = Awaited<ReturnType<typeof getEducationalClassById>>,
  TError = unknown,
>(
  educationalClassId: number,
  params?: GetEducationalClassByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClassById>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEducationalClassByIdQueryOptions(educationalClassId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Î∞ò Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌï©ÎãàÎã§. Î≥ÄÍ≤ΩÌï† Í∞íÎßå Ï†ÑÏÜ°ÌïòÎ©¥ Îê©ÎãàÎã§.
 * @summary Î∞ò Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const updateEducationalClassById = (
  educationalClassId: number,
  educationalClassUpdateRequest: EducationalClassUpdateRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseEducationalClassResult>(
    {
      url: `/member/v1/educational-class/${educationalClassId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: educationalClassUpdateRequest,
    },
    options,
  );
};

export const getUpdateEducationalClassByIdMutationOptions = <
  TData = Awaited<ReturnType<typeof updateEducationalClassById>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: EducationalClassUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['updateEducationalClassById'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEducationalClassById>>,
    { educationalClassId: number; data: EducationalClassUpdateRequest }
  > = (props) => {
    const { educationalClassId, data } = props ?? {};

    return updateEducationalClassById(educationalClassId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: EducationalClassUpdateRequest },
    TContext
  >;
};

export type UpdateEducationalClassByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateEducationalClassById>>
>;
export type UpdateEducationalClassByIdMutationBody = EducationalClassUpdateRequest;
export type UpdateEducationalClassByIdMutationError = unknown;

/**
 * @summary Î∞ò Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const useUpdateEducationalClassById = <
  TData = Awaited<ReturnType<typeof updateEducationalClassById>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: EducationalClassUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { educationalClassId: number; data: EducationalClassUpdateRequest }, TContext> => {
  const mutationOptions = getUpdateEducationalClassByIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Îì±Î°ùÎêú Î∞ò Ï†ïÎ≥¥Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Î∞ò ÏÇ≠Ï†ú
 */
export const deleteEducationalClassById = (
  educationalClassId: number,
  educationalClassUpdateRequest: EducationalClassUpdateRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/v1/educational-class/${educationalClassId}`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: educationalClassUpdateRequest,
    },
    options,
  );
};

export const getDeleteEducationalClassByIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteEducationalClassById>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: EducationalClassUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['deleteEducationalClassById'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEducationalClassById>>,
    { educationalClassId: number; data: EducationalClassUpdateRequest }
  > = (props) => {
    const { educationalClassId, data } = props ?? {};

    return deleteEducationalClassById(educationalClassId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: EducationalClassUpdateRequest },
    TContext
  >;
};

export type DeleteEducationalClassByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteEducationalClassById>>
>;
export type DeleteEducationalClassByIdMutationBody = EducationalClassUpdateRequest;
export type DeleteEducationalClassByIdMutationError = unknown;

/**
 * @summary Î∞ò ÏÇ≠Ï†ú
 */
export const useDeleteEducationalClassById = <
  TData = Awaited<ReturnType<typeof deleteEducationalClassById>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: EducationalClassUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { educationalClassId: number; data: EducationalClassUpdateRequest }, TContext> => {
  const mutationOptions = getDeleteEducationalClassByIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌÜ†ÌÅ∞ÏúºÎ°ú Ïù∏Ï¶ù Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÑ∏ÏÖòÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 */
export const getByIdOrToken = (
  token: string,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAuthSessionResult>(
    { url: `/member/v1/auth-sessions/${token}`, method: 'GET', signal },
    options,
  );
};

export const getGetByIdOrTokenQueryKey = (token: string) => {
  return [`/member/v1/auth-sessions/${token}`] as const;
};

export const getGetByIdOrTokenQueryOptions = <TData = Awaited<ReturnType<typeof getByIdOrToken>>, TError = unknown>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdOrTokenQueryKey(token);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByIdOrToken>>> = ({ signal }) =>
    getByIdOrToken(token, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!token, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByIdOrToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByIdOrTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getByIdOrToken>>>;
export type GetByIdOrTokenQueryError = unknown;

export function useGetByIdOrToken<TData = Awaited<ReturnType<typeof getByIdOrToken>>, TError = unknown>(
  token: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrToken<TData = Awaited<ReturnType<typeof getByIdOrToken>>, TError = unknown>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrToken<TData = Awaited<ReturnType<typeof getByIdOrToken>>, TError = unknown>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÑ∏ÏÖòÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 */

export function useGetByIdOrToken<TData = Awaited<ReturnType<typeof getByIdOrToken>>, TError = unknown>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrToken>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByIdOrTokenQueryOptions(token, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÎã§Î©¥ Í∞ôÏùÄ ÌÜ†ÌÅ∞ÏùÑ ÏùëÎãµÌïòÍ≥†, ÎßåÎ£åÎêêÎã§Î©¥ ÏÉà ÌÜ†ÌÅ∞ÏùÑ ÏÉùÏÑ±Ìï¥ÏÑú Ï†ÑÎã¨Ìï©ÎãàÎã§,Î°úÍ∑∏Ïù∏Ìï† Ïàò ÏûàÎäî Í∏∞Í∏∞ (ÌòÑÏû¨ 3ÎåÄ) Ï¥àÍ≥ºÌïòÎ©¥ Í∞ÄÏû• Ïò§ÎûòÎêú ÌÜ†ÌÅ∞Ïù¥ ÏÇ≠Ï†úÎêòÏñ¥ Ï∞æÏùÑ Ïàò ÏóÜÎäî ÌÜ†ÌÅ∞ÏúºÎ°ú ÏùëÎãµÌï©ÎãàÎã§. -> Îã§Ïãú Î°úÍ∑∏Ïù∏ ÌïÑÏöî. (Îã§Î•∏ Í∏∞Í∏∞ Î°úÍ∑∏ÏïÑÏõÉ Ï†àÏ∞®Îäî Ïù¥Î≤àÏóê ÌïòÏßÄ ÏïäÏäµÎãàÎã§.)
 * @summary ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã†Ìï©ÎãàÎã§.
 */
export const refreshSignIn = (
  token: string,
  refreshAuthSessionRequest: RefreshAuthSessionRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseAuthSessionResult>(
    {
      url: `/member/v1/auth-sessions/${token}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: refreshAuthSessionRequest,
    },
    options,
  );
};

export const getRefreshSignInMutationOptions = <
  TData = Awaited<ReturnType<typeof refreshSignIn>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { token: string; data: RefreshAuthSessionRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['refreshSignIn'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshSignIn>>,
    { token: string; data: RefreshAuthSessionRequest }
  > = (props) => {
    const { token, data } = props ?? {};

    return refreshSignIn(token, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { token: string; data: RefreshAuthSessionRequest },
    TContext
  >;
};

export type RefreshSignInMutationResult = NonNullable<Awaited<ReturnType<typeof refreshSignIn>>>;
export type RefreshSignInMutationBody = RefreshAuthSessionRequest;
export type RefreshSignInMutationError = unknown;

/**
 * @summary ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã†Ìï©ÎãàÎã§.
 */
export const useRefreshSignIn = <
  TData = Awaited<ReturnType<typeof refreshSignIn>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { token: string; data: RefreshAuthSessionRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { token: string; data: RefreshAuthSessionRequest }, TContext> => {
  const mutationOptions = getRefreshSignInMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î≥ÄÍ≤ΩÌïòÎäî api ÏûÖÎãàÎã§.
 * @summary (ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞Ïö©)ÎπÑÎ∞ÄÎ≤àÌò∏ Îã§Ïãú ÏÑ§Ï†ï
 */
export const resetPassword = (
  accountPasswordChangeRequestForOpen: AccountPasswordChangeRequestForOpen,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/open-api/v2/accounts/rest-password`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: accountPasswordChangeRequestForOpen,
    },
    options,
  );
};

export const getResetPasswordMutationOptions = <
  TData = Awaited<ReturnType<typeof resetPassword>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountPasswordChangeRequestForOpen }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['resetPassword'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { data: AccountPasswordChangeRequestForOpen }
  > = (props) => {
    const { data } = props ?? {};

    return resetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AccountPasswordChangeRequestForOpen },
    TContext
  >;
};

export type ResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof resetPassword>>>;
export type ResetPasswordMutationBody = AccountPasswordChangeRequestForOpen;
export type ResetPasswordMutationError = unknown;

/**
 * @summary (ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞Ïö©)ÎπÑÎ∞ÄÎ≤àÌò∏ Îã§Ïãú ÏÑ§Ï†ï
 */
export const useResetPassword = <
  TData = Awaited<ReturnType<typeof resetPassword>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountPasswordChangeRequestForOpen }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: AccountPasswordChangeRequestForOpen }, TContext> => {
  const mutationOptions = getResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÎã§Î©¥ Í∞ôÏùÄ ÌÜ†ÌÅ∞ÏùÑ ÏùëÎãµÌïòÍ≥†, ÎßåÎ£åÎêêÎã§Î©¥ ÏÉà ÌÜ†ÌÅ∞ÏùÑ ÏÉùÏÑ±Ìï¥ÏÑú Ï†ÑÎã¨Ìï©ÎãàÎã§,Î°úÍ∑∏Ïù∏Ìï† Ïàò ÏûàÎäî Í∏∞Í∏∞ (ÌòÑÏû¨ 3ÎåÄ) Ï¥àÍ≥ºÌïòÎ©¥ Í∞ÄÏû• Ïò§ÎûòÎêú ÌÜ†ÌÅ∞Ïù¥ ÏÇ≠Ï†úÎêòÏñ¥ Ï∞æÏùÑ Ïàò ÏóÜÎäî ÌÜ†ÌÅ∞ÏúºÎ°ú ÏùëÎãµÌï©ÎãàÎã§. -> Îã§Ïãú Î°úÍ∑∏Ïù∏ ÌïÑÏöî. (Îã§Î•∏ Í∏∞Í∏∞ Î°úÍ∑∏ÏïÑÏõÉ Ï†àÏ∞®Îäî Ïù¥Î≤àÏóê ÌïòÏßÄ ÏïäÏäµÎãàÎã§.)
 * @summary ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã†Ìï©ÎãàÎã§.
 */
export const refreshSignIn1 = (
  token: string,
  refreshAuthSessionRequest: RefreshAuthSessionRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseAuthSessionResult>(
    {
      url: `/member/open-api/v1/auth-sessions/${token}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: refreshAuthSessionRequest,
    },
    options,
  );
};

export const getRefreshSignIn1MutationOptions = <
  TData = Awaited<ReturnType<typeof refreshSignIn1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { token: string; data: RefreshAuthSessionRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['refreshSignIn1'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshSignIn1>>,
    { token: string; data: RefreshAuthSessionRequest }
  > = (props) => {
    const { token, data } = props ?? {};

    return refreshSignIn1(token, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { token: string; data: RefreshAuthSessionRequest },
    TContext
  >;
};

export type RefreshSignIn1MutationResult = NonNullable<Awaited<ReturnType<typeof refreshSignIn1>>>;
export type RefreshSignIn1MutationBody = RefreshAuthSessionRequest;
export type RefreshSignIn1MutationError = unknown;

/**
 * @summary ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã†Ìï©ÎãàÎã§.
 */
export const useRefreshSignIn1 = <
  TData = Awaited<ReturnType<typeof refreshSignIn1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { token: string; data: RefreshAuthSessionRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { token: string; data: RefreshAuthSessionRequest }, TContext> => {
  const mutationOptions = getRefreshSignIn1MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Î≤àÌò∏ÏôÄ ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ÌïòÍ≥† ÌÜ†ÌÅ∞ÏùÑ ÏñªÎäî apiÏûÖÎãàÎã§.1Í∞ú Í≥ÑÏ†ïÏúºÎ°ú ÏµúÎåÄ 3Í∞úÏùò ÏÑúÎ°ú Îã§Î•∏ ÎîîÎ∞îÏù¥Ïä§ÏóêÏÑú Ïù∏Ï¶ù ÏÑ∏ÏÖòÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÏúºÎØÄÎ°ú 4Î≤àÏß∏ Î°úÍ∑∏Ïù∏Î∂ÄÌÑ∞Îäî Îã§Ïùå ÏàúÏÑúÎ°ú ÏÑ∏ÏÖòÏù¥ Ï¢ÖÎ£åÎêúÎã§.
  1. Ïù∏Ï¶ù ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêú Í≤É
  2. ÎßåÎ£åÎêú ÏÑ∏ÏÖòÏù¥ Ïó¨Îü¨ Í∞úÎùºÎ©¥, ÎßåÎ£å ÏãúÏ†êÏù¥ Ïò§ÎûòÎêú ÏàúÏÑúÎ°ú
  3. ÎßåÎ£åÎêú ÏÑ∏ÏÖòÏù¥ ÏóÜÎã§Î©¥ ÎßåÎ£å ÏãúÏ†êÏù¥ Í∞ÄÍπåÏö¥ ÏàúÏÑúÎ°ú
 * @summary Î≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ ÌïòÎäî api
 */
export const signIn = (
  signInWithPhoneRequest: SignInWithPhoneRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAuthSessionResult>(
    {
      url: `/member/v2/auth-sessions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInWithPhoneRequest,
      signal,
    },
    options,
  );
};

export const getSignInMutationOptions = <
  TData = Awaited<ReturnType<typeof signIn>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['signIn'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn>>, { data: SignInWithPhoneRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return signIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: SignInWithPhoneRequest },
    TContext
  >;
};

export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>;
export type SignInMutationBody = SignInWithPhoneRequest;
export type SignInMutationError = unknown;

/**
 * @summary Î≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ ÌïòÎäî api
 */
export const useSignIn = <TData = Awaited<ReturnType<typeof signIn>>, TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: SignInWithPhoneRequest }, TContext> => {
  const mutationOptions = getSignInMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Ìï∏ÎìúÌè∞ Î≤àÌò∏Î°ú ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const joinWithPhone = (
  accountJoinWithPhoneRequest: AccountJoinWithPhoneRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAccountResultV2>(
    {
      url: `/member/v2/accounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: accountJoinWithPhoneRequest,
      signal,
    },
    options,
  );
};

export const getJoinWithPhoneMutationOptions = <
  TData = Awaited<ReturnType<typeof joinWithPhone>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountJoinWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['joinWithPhone'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof joinWithPhone>>,
    { data: AccountJoinWithPhoneRequest }
  > = (props) => {
    const { data } = props ?? {};

    return joinWithPhone(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AccountJoinWithPhoneRequest },
    TContext
  >;
};

export type JoinWithPhoneMutationResult = NonNullable<Awaited<ReturnType<typeof joinWithPhone>>>;
export type JoinWithPhoneMutationBody = AccountJoinWithPhoneRequest;
export type JoinWithPhoneMutationError = unknown;

/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useJoinWithPhone = <
  TData = Awaited<ReturnType<typeof joinWithPhone>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountJoinWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: AccountJoinWithPhoneRequest }, TContext> => {
  const mutationOptions = getJoinWithPhoneMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌÉàÌá¥ ÏöîÏ≤≠ÌïòÎäî api ÏûÖÎãàÎã§.
 * @summary ÌÉàÌá¥ ÏöîÏ≤≠(ÏùºÎã® Î°úÍ∑∏Îßå ÏåìÍ∏∞)
 */
export const requestWithdraw = (
  accountWithdrawRequest: AccountWithdrawRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/v2/accounts/withdraw`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: accountWithdrawRequest,
      signal,
    },
    options,
  );
};

export const getRequestWithdrawMutationOptions = <
  TData = Awaited<ReturnType<typeof requestWithdraw>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountWithdrawRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['requestWithdraw'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestWithdraw>>, { data: AccountWithdrawRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return requestWithdraw(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AccountWithdrawRequest },
    TContext
  >;
};

export type RequestWithdrawMutationResult = NonNullable<Awaited<ReturnType<typeof requestWithdraw>>>;
export type RequestWithdrawMutationBody = AccountWithdrawRequest;
export type RequestWithdrawMutationError = unknown;

/**
 * @summary ÌÉàÌá¥ ÏöîÏ≤≠(ÏùºÎã® Î°úÍ∑∏Îßå ÏåìÍ∏∞)
 */
export const useRequestWithdraw = <
  TData = Awaited<ReturnType<typeof requestWithdraw>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountWithdrawRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: AccountWithdrawRequest }, TContext> => {
  const mutationOptions = getRequestWithdrawMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌîÑÎ°úÌïÑ id Î¶¨Ïä§Ìä∏Î°ú Ïó¨Îü¨Í∞úÎ•º ÌïúÎ≤àÏóê Ï°∞ÌöåÌï©ÎãàÎã§. (Ïôú ÎßåÎì§ÏóàÎäîÏßÄÎäî..? )
 * @summary Îã§Ï§ë ÌîÑÎ°úÌïÑ Ï°∞Ìöå(id)
 */
export const getListByIds = (
  profilesByIdsRequest: ProfilesByIdsRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListProfileResult>(
    {
      url: `/member/v1/profiles/list-by-id`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: profilesByIdsRequest,
      signal,
    },
    options,
  );
};

export const getGetListByIdsMutationOptions = <
  TData = Awaited<ReturnType<typeof getListByIds>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: ProfilesByIdsRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['getListByIds'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof getListByIds>>, { data: ProfilesByIdsRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return getListByIds(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: ProfilesByIdsRequest },
    TContext
  >;
};

export type GetListByIdsMutationResult = NonNullable<Awaited<ReturnType<typeof getListByIds>>>;
export type GetListByIdsMutationBody = ProfilesByIdsRequest;
export type GetListByIdsMutationError = unknown;

/**
 * @summary Îã§Ï§ë ÌîÑÎ°úÌïÑ Ï°∞Ìöå(id)
 */
export const useGetListByIds = <
  TData = Awaited<ReturnType<typeof getListByIds>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: ProfilesByIdsRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: ProfilesByIdsRequest }, TContext> => {
  const mutationOptions = getGetListByIdsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌîÑÎ°úÌïÑ ÏΩîÎìú Î¶¨Ïä§Ìä∏Î°ú Ïó¨Îü¨Í∞úÎ•º ÌïúÎ≤àÏóê Ï°∞ÌöåÌï©ÎãàÎã§. (Ïôú ÎßåÎì§ÏóàÎäîÏßÄÎäî..? )
 * @summary Îã§Ï§ë ÌîÑÎ°úÌïÑ Ï°∞Ìöå(ÏΩîÎìú)
 */
export const getListByCodes = (
  profilesByCodesRequest: ProfilesByCodesRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListProfileResult>(
    {
      url: `/member/v1/profiles/list-by-code`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: profilesByCodesRequest,
      signal,
    },
    options,
  );
};

export const getGetListByCodesMutationOptions = <
  TData = Awaited<ReturnType<typeof getListByCodes>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: ProfilesByCodesRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['getListByCodes'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof getListByCodes>>, { data: ProfilesByCodesRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return getListByCodes(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: ProfilesByCodesRequest },
    TContext
  >;
};

export type GetListByCodesMutationResult = NonNullable<Awaited<ReturnType<typeof getListByCodes>>>;
export type GetListByCodesMutationBody = ProfilesByCodesRequest;
export type GetListByCodesMutationError = unknown;

/**
 * @summary Îã§Ï§ë ÌîÑÎ°úÌïÑ Ï°∞Ìöå(ÏΩîÎìú)
 */
export const useGetListByCodes = <
  TData = Awaited<ReturnType<typeof getListByCodes>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: ProfilesByCodesRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: ProfilesByCodesRequest }, TContext> => {
  const mutationOptions = getGetListByCodesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÌîÑÎ°úÌïÑ idÎÇò ÏΩîÎìúÎ°ú ÏûÖÎ†•Ìïú ÎåÄÏÉÅÏùÑ ÌåîÎ°úÏö∞ Ìï©ÎãàÎã§.
 * @summary ÌåîÎ°úÏö∞ ÌïòÍ∏∞
 */
export const addFollow = (
  profileIdOrCode: string,
  followRequest: FollowRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<unknown>(
    {
      url: `/member/v1/profile/${profileIdOrCode}/follow`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: followRequest,
      signal,
    },
    options,
  );
};

export const getAddFollowMutationOptions = <
  TData = Awaited<ReturnType<typeof addFollow>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: FollowRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['addFollow'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addFollow>>,
    { profileIdOrCode: string; data: FollowRequest }
  > = (props) => {
    const { profileIdOrCode, data } = props ?? {};

    return addFollow(profileIdOrCode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { profileIdOrCode: string; data: FollowRequest },
    TContext
  >;
};

export type AddFollowMutationResult = NonNullable<Awaited<ReturnType<typeof addFollow>>>;
export type AddFollowMutationBody = FollowRequest;
export type AddFollowMutationError = unknown;

/**
 * @summary ÌåîÎ°úÏö∞ ÌïòÍ∏∞
 */
export const useAddFollow = <
  TData = Awaited<ReturnType<typeof addFollow>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: FollowRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { profileIdOrCode: string; data: FollowRequest }, TContext> => {
  const mutationOptions = getAddFollowMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Î∞ò Ï†ïÎ≥¥Î•º Ïã†Í∑úÎ°ú Îì±Î°ùÌï©ÎãàÎã§.
 * @summary Î∞ò Ïã†Í∑ú Îì±Î°ù
 */
export const addEducationalClass = (
  educationalClassAddRequest: EducationalClassAddRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseEducationalClassResult>(
    {
      url: `/member/v1/educational-class`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: educationalClassAddRequest,
      signal,
    },
    options,
  );
};

export const getAddEducationalClassMutationOptions = <
  TData = Awaited<ReturnType<typeof addEducationalClass>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: EducationalClassAddRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['addEducationalClass'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addEducationalClass>>,
    { data: EducationalClassAddRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addEducationalClass(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: EducationalClassAddRequest },
    TContext
  >;
};

export type AddEducationalClassMutationResult = NonNullable<Awaited<ReturnType<typeof addEducationalClass>>>;
export type AddEducationalClassMutationBody = EducationalClassAddRequest;
export type AddEducationalClassMutationError = unknown;

/**
 * @summary Î∞ò Ïã†Í∑ú Îì±Î°ù
 */
export const useAddEducationalClass = <
  TData = Awaited<ReturnType<typeof addEducationalClass>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: EducationalClassAddRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: EducationalClassAddRequest }, TContext> => {
  const mutationOptions = getAddEducationalClassMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Î∞òÏóê Îì±Î°ùÎêú ÌïôÏÉùÎì§ÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Î∞òÏóê Îì±Î°ùÎêú ÌïôÏÉùÎì§ Ï°∞Ìöå.
 */
export const getStudents = (
  educationalClassId: number,
  params?: GetStudentsParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListStudentResult>(
    { url: `/member/v1/educational-class/${educationalClassId}/students`, method: 'GET', params, signal },
    options,
  );
};

export const getGetStudentsQueryKey = (educationalClassId: number, params?: GetStudentsParams) => {
  return [`/member/v1/educational-class/${educationalClassId}/students`, ...(params ? [params] : [])] as const;
};

export const getGetStudentsQueryOptions = <TData = Awaited<ReturnType<typeof getStudents>>, TError = unknown>(
  educationalClassId: number,
  params?: GetStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudentsQueryKey(educationalClassId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudents>>> = ({ signal }) =>
    getStudents(educationalClassId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!educationalClassId, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStudents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetStudentsQueryResult = NonNullable<Awaited<ReturnType<typeof getStudents>>>;
export type GetStudentsQueryError = unknown;

export function useGetStudents<TData = Awaited<ReturnType<typeof getStudents>>, TError = unknown>(
  educationalClassId: number,
  params: undefined | GetStudentsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudents<TData = Awaited<ReturnType<typeof getStudents>>, TError = unknown>(
  educationalClassId: number,
  params?: GetStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudents<TData = Awaited<ReturnType<typeof getStudents>>, TError = unknown>(
  educationalClassId: number,
  params?: GetStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Î∞òÏóê Îì±Î°ùÎêú ÌïôÏÉùÎì§ Ï°∞Ìöå.
 */

export function useGetStudents<TData = Awaited<ReturnType<typeof getStudents>>, TError = unknown>(
  educationalClassId: number,
  params?: GetStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudents>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetStudentsQueryOptions(educationalClassId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Î∞òÏóê ÏÉàÎ°úÏö¥ ÌïôÏÉùÏùÑ Îì±Î°ùÌï©ÎãàÎã§.Îì±Î°ù ÏôÑÎ£åÏãú Ï†ÑÎã¨Î∞õÏùÄ idÎ°úÏôÄ ÌïôÏÉù Ïù¥Î¶ÑÏúºÎ°ú [POST] /file/v1/smart-folder/photo/student/add-folder Î•º Ìò∏Ï∂úÌï¥Ï£ºÏÖîÏïº Ìï©ÎãàÎã§.
 * @summary Î∞òÏóê ÏïÑÏù¥/ÌïôÏÉùÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§.
 */
export const addStudent = (
  educationalClassId: number,
  studentAddRequest: StudentAddRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseStudentResult>(
    {
      url: `/member/v1/educational-class/${educationalClassId}/students`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: studentAddRequest,
      signal,
    },
    options,
  );
};

export const getAddStudentMutationOptions = <
  TData = Awaited<ReturnType<typeof addStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { educationalClassId: number; data: StudentAddRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['addStudent'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addStudent>>,
    { educationalClassId: number; data: StudentAddRequest }
  > = (props) => {
    const { educationalClassId, data } = props ?? {};

    return addStudent(educationalClassId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { educationalClassId: number; data: StudentAddRequest },
    TContext
  >;
};

export type AddStudentMutationResult = NonNullable<Awaited<ReturnType<typeof addStudent>>>;
export type AddStudentMutationBody = StudentAddRequest;
export type AddStudentMutationError = unknown;

/**
 * @summary Î∞òÏóê ÏïÑÏù¥/ÌïôÏÉùÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§.
 */
export const useAddStudent = <
  TData = Awaited<ReturnType<typeof addStudent>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { educationalClassId: number; data: StudentAddRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { educationalClassId: number; data: StudentAddRequest }, TContext> => {
  const mutationOptions = getAddStudentMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ÏùÑ ÏãúÎèÑÌïòÎ©¥ Ïù∏Ï¶ù ÏÑ∏ÏÖòÏùÑ ÏÉùÏÑ±ÌïúÎã§.
1Í∞ú Í≥ÑÏ†ïÏúºÎ°ú ÏµúÎåÄ 3Í∞úÏùò ÏÑúÎ°ú Îã§Î•∏ ÎîîÎ∞îÏù¥Ïä§ÏóêÏÑú Ïù∏Ï¶ù ÏÑ∏ÏÖòÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÏúºÎØÄÎ°ú 4Î≤àÏß∏ Î°úÍ∑∏Ïù∏Î∂ÄÌÑ∞Îäî Îã§Ïùå ÏàúÏÑúÎ°ú ÏÑ∏ÏÖòÏù¥ Ï¢ÖÎ£åÎêúÎã§.
  1. Ïù∏Ï¶ù ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêú Í≤É
  2. ÎßåÎ£åÎêú ÏÑ∏ÏÖòÏù¥ Ïó¨Îü¨ Í∞úÎùºÎ©¥, ÎßåÎ£å ÏãúÏ†êÏù¥ Ïò§ÎûòÎêú ÏàúÏÑúÎ°ú
  3. ÎßåÎ£åÎêú ÏÑ∏ÏÖòÏù¥ ÏóÜÎã§Î©¥ ÎßåÎ£å ÏãúÏ†êÏù¥ Í∞ÄÍπåÏö¥ ÏàúÏÑúÎ°ú
 * @summary emailÎ°ú Î°úÍ∑∏Ïù∏
 */
export const signIn1 = (
  signInRequest: SignInRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAuthSessionResult>(
    {
      url: `/member/v1/auth-sessions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInRequest,
      signal,
    },
    options,
  );
};

export const getSignIn1MutationOptions = <
  TData = Awaited<ReturnType<typeof signIn1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['signIn1'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn1>>, { data: SignInRequest }> = (props) => {
    const { data } = props ?? {};

    return signIn1(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { data: SignInRequest }, TContext>;
};

export type SignIn1MutationResult = NonNullable<Awaited<ReturnType<typeof signIn1>>>;
export type SignIn1MutationBody = SignInRequest;
export type SignIn1MutationError = unknown;

/**
 * @summary emailÎ°ú Î°úÍ∑∏Ïù∏
 */
export const useSignIn1 = <
  TData = Awaited<ReturnType<typeof signIn1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: SignInRequest }, TContext> => {
  const mutationOptions = getSignIn1MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Î≤àÌò∏ÏôÄ ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ÌïòÍ≥† ÌÜ†ÌÅ∞ÏùÑ ÏñªÎäî apiÏûÖÎãàÎã§.1Í∞ú Í≥ÑÏ†ïÏúºÎ°ú ÏµúÎåÄ 3Í∞úÏùò ÏÑúÎ°ú Îã§Î•∏ ÎîîÎ∞îÏù¥Ïä§ÏóêÏÑú Ïù∏Ï¶ù ÏÑ∏ÏÖòÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÏúºÎØÄÎ°ú 4Î≤àÏß∏ Î°úÍ∑∏Ïù∏Î∂ÄÌÑ∞Îäî Îã§Ïùå ÏàúÏÑúÎ°ú ÏÑ∏ÏÖòÏù¥ Ï¢ÖÎ£åÎêúÎã§.
  1. Ïù∏Ï¶ù ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêú Í≤É
  2. ÎßåÎ£åÎêú ÏÑ∏ÏÖòÏù¥ Ïó¨Îü¨ Í∞úÎùºÎ©¥, ÎßåÎ£å ÏãúÏ†êÏù¥ Ïò§ÎûòÎêú ÏàúÏÑúÎ°ú
  3. ÎßåÎ£åÎêú ÏÑ∏ÏÖòÏù¥ ÏóÜÎã§Î©¥ ÎßåÎ£å ÏãúÏ†êÏù¥ Í∞ÄÍπåÏö¥ ÏàúÏÑúÎ°ú
 * @summary Î≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ ÌïòÎäî api
 */
export const signIn2 = (
  signInWithPhoneRequest: SignInWithPhoneRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAuthSessionResult>(
    {
      url: `/member/open-api/v2/auth-sessions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInWithPhoneRequest,
      signal,
    },
    options,
  );
};

export const getSignIn2MutationOptions = <
  TData = Awaited<ReturnType<typeof signIn2>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['signIn2'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn2>>, { data: SignInWithPhoneRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return signIn2(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: SignInWithPhoneRequest },
    TContext
  >;
};

export type SignIn2MutationResult = NonNullable<Awaited<ReturnType<typeof signIn2>>>;
export type SignIn2MutationBody = SignInWithPhoneRequest;
export type SignIn2MutationError = unknown;

/**
 * @summary Î≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ ÌïòÎäî api
 */
export const useSignIn2 = <
  TData = Awaited<ReturnType<typeof signIn2>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: SignInWithPhoneRequest }, TContext> => {
  const mutationOptions = getSignIn2MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Ìï∏ÎìúÌè∞ Î≤àÌò∏Î°ú ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const joinWithPhone1 = (
  accountJoinWithPhoneRequest: AccountJoinWithPhoneRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAccountResultV2>(
    {
      url: `/member/open-api/v2/accounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: accountJoinWithPhoneRequest,
      signal,
    },
    options,
  );
};

export const getJoinWithPhone1MutationOptions = <
  TData = Awaited<ReturnType<typeof joinWithPhone1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountJoinWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['joinWithPhone1'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof joinWithPhone1>>,
    { data: AccountJoinWithPhoneRequest }
  > = (props) => {
    const { data } = props ?? {};

    return joinWithPhone1(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AccountJoinWithPhoneRequest },
    TContext
  >;
};

export type JoinWithPhone1MutationResult = NonNullable<Awaited<ReturnType<typeof joinWithPhone1>>>;
export type JoinWithPhone1MutationBody = AccountJoinWithPhoneRequest;
export type JoinWithPhone1MutationError = unknown;

/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useJoinWithPhone1 = <
  TData = Awaited<ReturnType<typeof joinWithPhone1>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: AccountJoinWithPhoneRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: AccountJoinWithPhoneRequest }, TContext> => {
  const mutationOptions = getJoinWithPhone1MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Ìï∏ÎìúÌè∞ Î≤àÌò∏Î°ú ÌöåÏõêÏ†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§. (ÏïÑÏù¥ÎîîÎ°ú Ï°∞ÌöåÎäî v1Ïóê ÏûàÏùå)
 * @summary Ï†ÑÌôîÎ≤àÌò∏Î°ú ÌöåÏõêÏ†ïÎ≥¥ Ï°∞Ìöå
 */
export const getByPhoneNumber = (
  params?: GetByPhoneNumberParams,
  phoneNumber: string = '01287163525',
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAccountResultV2>(
    { url: `/member/v2/accounts/${phoneNumber}`, method: 'GET', params, signal },
    options,
  );
};

export const getGetByPhoneNumberQueryKey = (params?: GetByPhoneNumberParams, phoneNumber: string = '01287163525') => {
  return [`/member/v2/accounts/${phoneNumber}`, ...(params ? [params] : [])] as const;
};

export const getGetByPhoneNumberQueryOptions = <TData = Awaited<ReturnType<typeof getByPhoneNumber>>, TError = unknown>(
  params?: GetByPhoneNumberParams,
  phoneNumber: string = '01287163525',
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByPhoneNumberQueryKey(params, phoneNumber);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByPhoneNumber>>> = ({ signal }) =>
    getByPhoneNumber(params, phoneNumber, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!phoneNumber, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByPhoneNumber>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByPhoneNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getByPhoneNumber>>>;
export type GetByPhoneNumberQueryError = unknown;

export function useGetByPhoneNumber<TData = Awaited<ReturnType<typeof getByPhoneNumber>>, TError = unknown>(
  params: undefined | GetByPhoneNumberParams,
  phoneNumber: undefined | string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByPhoneNumber<TData = Awaited<ReturnType<typeof getByPhoneNumber>>, TError = unknown>(
  params?: GetByPhoneNumberParams,
  phoneNumber?: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByPhoneNumber<TData = Awaited<ReturnType<typeof getByPhoneNumber>>, TError = unknown>(
  params?: GetByPhoneNumberParams,
  phoneNumber?: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ï†ÑÌôîÎ≤àÌò∏Î°ú ÌöåÏõêÏ†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetByPhoneNumber<TData = Awaited<ReturnType<typeof getByPhoneNumber>>, TError = unknown>(
  params?: GetByPhoneNumberParams,
  phoneNumber: string = '01287163525',
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByPhoneNumberQueryOptions(params, phoneNumber, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Í≥ÑÏ†ï idÎ°ú ÌöåÏõêÏ†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≥ÑÏ†ï idÎ°ú ÌöåÏõêÏ†ïÎ≥¥ Ï°∞Ìöå
 */
export const getById = (
  accountId: string,
  params?: GetByIdParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAccountResultV2>(
    { url: `/member/v2/account/${accountId}`, method: 'GET', params, signal },
    options,
  );
};

export const getGetByIdQueryKey = (accountId: string, params?: GetByIdParams) => {
  return [`/member/v2/account/${accountId}`, ...(params ? [params] : [])] as const;
};

export const getGetByIdQueryOptions = <TData = Awaited<ReturnType<typeof getById>>, TError = unknown>(
  accountId: string,
  params?: GetByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdQueryKey(accountId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById>>> = ({ signal }) =>
    getById(accountId, params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getById>>>;
export type GetByIdQueryError = unknown;

export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = unknown>(
  accountId: string,
  params: undefined | GetByIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getById>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = unknown>(
  accountId: string,
  params?: GetByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getById>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = unknown>(
  accountId: string,
  params?: GetByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Í≥ÑÏ†ï idÎ°ú ÌöåÏõêÏ†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetById<TData = Awaited<ReturnType<typeof getById>>, TError = unknown>(
  accountId: string,
  params?: GetByIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByIdQueryOptions(accountId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï¥àÎåÄÏû•Ïùò idÎÇò ÏΩîÎìúÎ°ú Ï¥àÎåÄÏû• Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§. isValidÍ∞Ä falseÎ©¥ ÏÇ¨Ïö© Î∂àÍ∞ÄÎä•Ìïú Ï¥àÎåÄ ÏûÖÎãàÎã§. (Ïù¥ÎØ∏ ÏÇ¨Ïö©Îêú Ï¥àÎåÄ)
 * @summary Ï¥àÎåÄÏû• Ï†ïÎ≥¥ Ï°∞Ìöå(ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ÍπåÏßÄ ÏùëÎãµ)
 */
export const getByIdOrCodeV2 = (
  idOrCode: string,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseInvitationV2Result>(
    { url: `/member/v1/v2/invitations/${idOrCode}`, method: 'GET', signal },
    options,
  );
};

export const getGetByIdOrCodeV2QueryKey = (idOrCode: string) => {
  return [`/member/v1/v2/invitations/${idOrCode}`] as const;
};

export const getGetByIdOrCodeV2QueryOptions = <TData = Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdOrCodeV2QueryKey(idOrCode);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByIdOrCodeV2>>> = ({ signal }) =>
    getByIdOrCodeV2(idOrCode, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByIdOrCodeV2>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByIdOrCodeV2QueryResult = NonNullable<Awaited<ReturnType<typeof getByIdOrCodeV2>>>;
export type GetByIdOrCodeV2QueryError = unknown;

export function useGetByIdOrCodeV2<TData = Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError = unknown>(
  idOrCode: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCodeV2<TData = Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCodeV2<TData = Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ï¥àÎåÄÏû• Ï†ïÎ≥¥ Ï°∞Ìöå(ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ÍπåÏßÄ ÏùëÎãµ)
 */

export function useGetByIdOrCodeV2<TData = Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV2>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByIdOrCodeV2QueryOptions(idOrCode, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï¥àÎåÄÏû•Ïùò idÎÇò ÏΩîÎìúÎ°ú Ï¥àÎåÄÏû• Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Ï¥àÎåÄÏû• Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getByIdOrCode = (
  idOrCode: string,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseInvitationResult>(
    { url: `/member/v1/v1/invitations/${idOrCode}`, method: 'GET', signal },
    options,
  );
};

export const getGetByIdOrCodeQueryKey = (idOrCode: string) => {
  return [`/member/v1/v1/invitations/${idOrCode}`] as const;
};

export const getGetByIdOrCodeQueryOptions = <TData = Awaited<ReturnType<typeof getByIdOrCode>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdOrCodeQueryKey(idOrCode);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByIdOrCode>>> = ({ signal }) =>
    getByIdOrCode(idOrCode, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByIdOrCode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByIdOrCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getByIdOrCode>>>;
export type GetByIdOrCodeQueryError = unknown;

export function useGetByIdOrCode<TData = Awaited<ReturnType<typeof getByIdOrCode>>, TError = unknown>(
  idOrCode: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCode<TData = Awaited<ReturnType<typeof getByIdOrCode>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCode<TData = Awaited<ReturnType<typeof getByIdOrCode>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ï¥àÎåÄÏû• Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetByIdOrCode<TData = Awaited<ReturnType<typeof getByIdOrCode>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByIdOrCodeQueryOptions(idOrCode, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * idÎ°ú Î≤°ÌÑ∞ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary idÎ°ú Ï°∞Ìöå
 */
export const getStudentFaceVector = (
  id: number,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseStudentFaceVectorResult>(
    { url: `/member/v1/student-feature-vector/${id}`, method: 'GET', signal },
    options,
  );
};

export const getGetStudentFaceVectorQueryKey = (id: number) => {
  return [`/member/v1/student-feature-vector/${id}`] as const;
};

export const getGetStudentFaceVectorQueryOptions = <
  TData = Awaited<ReturnType<typeof getStudentFaceVector>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudentFaceVectorQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudentFaceVector>>> = ({ signal }) =>
    getStudentFaceVector(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStudentFaceVector>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetStudentFaceVectorQueryResult = NonNullable<Awaited<ReturnType<typeof getStudentFaceVector>>>;
export type GetStudentFaceVectorQueryError = unknown;

export function useGetStudentFaceVector<TData = Awaited<ReturnType<typeof getStudentFaceVector>>, TError = unknown>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudentFaceVector<TData = Awaited<ReturnType<typeof getStudentFaceVector>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudentFaceVector<TData = Awaited<ReturnType<typeof getStudentFaceVector>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary idÎ°ú Ï°∞Ìöå
 */

export function useGetStudentFaceVector<TData = Awaited<ReturnType<typeof getStudentFaceVector>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVector>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetStudentFaceVectorQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï†ÑÏ≤¥ Ï†ïÎ≥¥Î•º ÏñªÍ±∞ÎÇò ÏöîÏ≤≠Ïãú Ï†ÑÎã¨ÌïòÎäî profileCodeÎ°ú ÏÇ¨Ïö©ÏûêÍ∞Ä Îì±Î°ùÌïú ÏïÑÏù¥ Î¶¨Ïä§Ìä∏ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏïÑÏù¥ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const getStudentFaceVectorList = (
  params?: GetStudentFaceVectorListParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListStudentFaceVectorResult>(
    { url: `/member/v1/student-feature-vector/list`, method: 'GET', params, signal },
    options,
  );
};

export const getGetStudentFaceVectorListQueryKey = (params?: GetStudentFaceVectorListParams) => {
  return [`/member/v1/student-feature-vector/list`, ...(params ? [params] : [])] as const;
};

export const getGetStudentFaceVectorListQueryOptions = <
  TData = Awaited<ReturnType<typeof getStudentFaceVectorList>>,
  TError = unknown,
>(
  params?: GetStudentFaceVectorListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudentFaceVectorListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudentFaceVectorList>>> = ({ signal }) =>
    getStudentFaceVectorList(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStudentFaceVectorList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetStudentFaceVectorListQueryResult = NonNullable<Awaited<ReturnType<typeof getStudentFaceVectorList>>>;
export type GetStudentFaceVectorListQueryError = unknown;

export function useGetStudentFaceVectorList<
  TData = Awaited<ReturnType<typeof getStudentFaceVectorList>>,
  TError = unknown,
>(
  params: undefined | GetStudentFaceVectorListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudentFaceVectorList<
  TData = Awaited<ReturnType<typeof getStudentFaceVectorList>>,
  TError = unknown,
>(
  params?: GetStudentFaceVectorListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetStudentFaceVectorList<
  TData = Awaited<ReturnType<typeof getStudentFaceVectorList>>,
  TError = unknown,
>(
  params?: GetStudentFaceVectorListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÏïÑÏù¥ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */

export function useGetStudentFaceVectorList<
  TData = Awaited<ReturnType<typeof getStudentFaceVectorList>>,
  TError = unknown,
>(
  params?: GetStudentFaceVectorListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudentFaceVectorList>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetStudentFaceVectorListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏûÖÎ†•Ìïú ÏÇ¨ÏßÑÏóêÏÑú ÏñºÍµ¥ Î≤°ÌÑ∞Î•º ÏñªÏäµÎãàÎã§.
 * @summary [ÌÖåÏä§Ìä∏]Ïù¥ÎØ∏ÏßÄ ÏñºÍµ¥ Î≤°ÌÑ∞ Ï°∞Ìöå
 */
export const getFaceVector = (
  params: GetFaceVectorParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListDouble>(
    { url: `/member/v1/student-feature-vector/face-vector`, method: 'GET', params, signal },
    options,
  );
};

export const getGetFaceVectorQueryKey = (params: GetFaceVectorParams) => {
  return [`/member/v1/student-feature-vector/face-vector`, ...(params ? [params] : [])] as const;
};

export const getGetFaceVectorQueryOptions = <TData = Awaited<ReturnType<typeof getFaceVector>>, TError = unknown>(
  params: GetFaceVectorParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFaceVectorQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaceVector>>> = ({ signal }) =>
    getFaceVector(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFaceVector>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetFaceVectorQueryResult = NonNullable<Awaited<ReturnType<typeof getFaceVector>>>;
export type GetFaceVectorQueryError = unknown;

export function useGetFaceVector<TData = Awaited<ReturnType<typeof getFaceVector>>, TError = unknown>(
  params: GetFaceVectorParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetFaceVector<TData = Awaited<ReturnType<typeof getFaceVector>>, TError = unknown>(
  params: GetFaceVectorParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetFaceVector<TData = Awaited<ReturnType<typeof getFaceVector>>, TError = unknown>(
  params: GetFaceVectorParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary [ÌÖåÏä§Ìä∏]Ïù¥ÎØ∏ÏßÄ ÏñºÍµ¥ Î≤°ÌÑ∞ Ï°∞Ìöå
 */

export function useGetFaceVector<TData = Awaited<ReturnType<typeof getFaceVector>>, TError = unknown>(
  params: GetFaceVectorParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFaceVector>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetFaceVectorQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌîÑÎ°úÌïÑÎ™ÖÏúºÎ°ú ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï°∞Ìöå Ìï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */
export const searchByName = (name: string, options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseProfileResult>(
    { url: `/member/v1/search/profiles/${name}`, method: 'GET', signal },
    options,
  );
};

export const getSearchByNameQueryKey = (name: string) => {
  return [`/member/v1/search/profiles/${name}`] as const;
};

export const getSearchByNameQueryOptions = <TData = Awaited<ReturnType<typeof searchByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchByNameQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchByName>>> = ({ signal }) =>
    searchByName(name, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SearchByNameQueryResult = NonNullable<Awaited<ReturnType<typeof searchByName>>>;
export type SearchByNameQueryError = unknown;

export function useSearchByName<TData = Awaited<ReturnType<typeof searchByName>>, TError = unknown>(
  name: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSearchByName<TData = Awaited<ReturnType<typeof searchByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSearchByName<TData = Awaited<ReturnType<typeof searchByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */

export function useSearchByName<TData = Awaited<ReturnType<typeof searchByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchByName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSearchByNameQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * idÎÇò ÏΩîÎìú Í∞íÏúºÎ°ú ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï°∞Ìöå Ìï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getByIdOrCode1 = (
  idOrCode: string,
  params?: GetByIdOrCode1Params,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseProfileResult>(
    { url: `/member/v1/profiles/${idOrCode}`, method: 'GET', params, signal },
    options,
  );
};

export const getGetByIdOrCode1QueryKey = (idOrCode: string, params?: GetByIdOrCode1Params) => {
  return [`/member/v1/profiles/${idOrCode}`, ...(params ? [params] : [])] as const;
};

export const getGetByIdOrCode1QueryOptions = <TData = Awaited<ReturnType<typeof getByIdOrCode1>>, TError = unknown>(
  idOrCode: string,
  params?: GetByIdOrCode1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdOrCode1QueryKey(idOrCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByIdOrCode1>>> = ({ signal }) =>
    getByIdOrCode1(idOrCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByIdOrCode1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByIdOrCode1QueryResult = NonNullable<Awaited<ReturnType<typeof getByIdOrCode1>>>;
export type GetByIdOrCode1QueryError = unknown;

export function useGetByIdOrCode1<TData = Awaited<ReturnType<typeof getByIdOrCode1>>, TError = unknown>(
  idOrCode: string,
  params: undefined | GetByIdOrCode1Params,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCode1<TData = Awaited<ReturnType<typeof getByIdOrCode1>>, TError = unknown>(
  idOrCode: string,
  params?: GetByIdOrCode1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCode1<TData = Awaited<ReturnType<typeof getByIdOrCode1>>, TError = unknown>(
  idOrCode: string,
  params?: GetByIdOrCode1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetByIdOrCode1<TData = Awaited<ReturnType<typeof getByIdOrCode1>>, TError = unknown>(
  idOrCode: string,
  params?: GetByIdOrCode1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCode1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByIdOrCode1QueryOptions(idOrCode, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏÑúÎπÑÏä§ÏóêÏÑú ÏÇ¨Ïö©ÏûêÎ•º ÌîÑÎ°úÌïÑÎ™ÖÏúºÎ°ú Ï°∞ÌöåÌï† Îïå ÏÇ¨Ïö©Ìï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå(startsWith Í≤ÄÏÉâ)
 */
export const startedWithName = (
  name: string,
  params?: StartedWithNameParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListProfileResult>(
    { url: `/member/v1/profiles/started-with-name/${name}`, method: 'GET', params, signal },
    options,
  );
};

export const getStartedWithNameQueryKey = (name: string, params?: StartedWithNameParams) => {
  return [`/member/v1/profiles/started-with-name/${name}`, ...(params ? [params] : [])] as const;
};

export const getStartedWithNameQueryOptions = <TData = Awaited<ReturnType<typeof startedWithName>>, TError = unknown>(
  name: string,
  params?: StartedWithNameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getStartedWithNameQueryKey(name, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof startedWithName>>> = ({ signal }) =>
    startedWithName(name, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof startedWithName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type StartedWithNameQueryResult = NonNullable<Awaited<ReturnType<typeof startedWithName>>>;
export type StartedWithNameQueryError = unknown;

export function useStartedWithName<TData = Awaited<ReturnType<typeof startedWithName>>, TError = unknown>(
  name: string,
  params: undefined | StartedWithNameParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useStartedWithName<TData = Awaited<ReturnType<typeof startedWithName>>, TError = unknown>(
  name: string,
  params?: StartedWithNameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useStartedWithName<TData = Awaited<ReturnType<typeof startedWithName>>, TError = unknown>(
  name: string,
  params?: StartedWithNameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå(startsWith Í≤ÄÏÉâ)
 */

export function useStartedWithName<TData = Awaited<ReturnType<typeof startedWithName>>, TError = unknown>(
  name: string,
  params?: StartedWithNameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStartedWithNameQueryOptions(name, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌîÑÎ°úÌïÑÎ™ÖÏúºÎ°ú Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùÑÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
 * @summary (Í∞ÄÏûÖÏö©)ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */
export const existedByName = (name: string, options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseString>(
    { url: `/member/v1/profiles/existed-by-name/${name}`, method: 'GET', signal },
    options,
  );
};

export const getExistedByNameQueryKey = (name: string) => {
  return [`/member/v1/profiles/existed-by-name/${name}`] as const;
};

export const getExistedByNameQueryOptions = <TData = Awaited<ReturnType<typeof existedByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExistedByNameQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof existedByName>>> = ({ signal }) =>
    existedByName(name, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof existedByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ExistedByNameQueryResult = NonNullable<Awaited<ReturnType<typeof existedByName>>>;
export type ExistedByNameQueryError = unknown;

export function useExistedByName<TData = Awaited<ReturnType<typeof existedByName>>, TError = unknown>(
  name: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useExistedByName<TData = Awaited<ReturnType<typeof existedByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useExistedByName<TData = Awaited<ReturnType<typeof existedByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary (Í∞ÄÏûÖÏö©)ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */

export function useExistedByName<TData = Awaited<ReturnType<typeof existedByName>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getExistedByNameQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÎÇ¥Í∞Ä ÌåîÎ°úÏö∞ Ìïú ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î™©Î°ùÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌåîÎ°úÏûâ Î™©Î°ù Ï°∞Ìöå
 */
export const getAllFollowings = (
  profileIdOrCode: string,
  params?: GetAllFollowingsParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListFollowResult>(
    { url: `/member/v1/profile/${profileIdOrCode}/following/list`, method: 'GET', params, signal },
    options,
  );
};

export const getGetAllFollowingsQueryKey = (profileIdOrCode: string, params?: GetAllFollowingsParams) => {
  return [`/member/v1/profile/${profileIdOrCode}/following/list`, ...(params ? [params] : [])] as const;
};

export const getGetAllFollowingsQueryOptions = <TData = Awaited<ReturnType<typeof getAllFollowings>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowingsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllFollowingsQueryKey(profileIdOrCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFollowings>>> = ({ signal }) =>
    getAllFollowings(profileIdOrCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!profileIdOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllFollowings>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllFollowingsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFollowings>>>;
export type GetAllFollowingsQueryError = unknown;

export function useGetAllFollowings<TData = Awaited<ReturnType<typeof getAllFollowings>>, TError = unknown>(
  profileIdOrCode: string,
  params: undefined | GetAllFollowingsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllFollowings<TData = Awaited<ReturnType<typeof getAllFollowings>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowingsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllFollowings<TData = Awaited<ReturnType<typeof getAllFollowings>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowingsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌåîÎ°úÏûâ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAllFollowings<TData = Awaited<ReturnType<typeof getAllFollowings>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowingsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowings>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllFollowingsQueryOptions(profileIdOrCode, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÎÇòÎ•º ÌåîÎ°úÏö∞ Ìïú ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑÎì§Ïùò Î™©Î°ùÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌåîÎ°úÏõå Î™©Î°ù Ï°∞Ìöå
 */
export const getAllFollowers = (
  profileIdOrCode: string,
  params?: GetAllFollowersParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListFollowResult>(
    { url: `/member/v1/profile/${profileIdOrCode}/follower/list`, method: 'GET', params, signal },
    options,
  );
};

export const getGetAllFollowersQueryKey = (profileIdOrCode: string, params?: GetAllFollowersParams) => {
  return [`/member/v1/profile/${profileIdOrCode}/follower/list`, ...(params ? [params] : [])] as const;
};

export const getGetAllFollowersQueryOptions = <TData = Awaited<ReturnType<typeof getAllFollowers>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllFollowersQueryKey(profileIdOrCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFollowers>>> = ({ signal }) =>
    getAllFollowers(profileIdOrCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!profileIdOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllFollowers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllFollowersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFollowers>>>;
export type GetAllFollowersQueryError = unknown;

export function useGetAllFollowers<TData = Awaited<ReturnType<typeof getAllFollowers>>, TError = unknown>(
  profileIdOrCode: string,
  params: undefined | GetAllFollowersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllFollowers<TData = Awaited<ReturnType<typeof getAllFollowers>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllFollowers<TData = Awaited<ReturnType<typeof getAllFollowers>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌåîÎ°úÏõå Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAllFollowers<TData = Awaited<ReturnType<typeof getAllFollowers>>, TError = unknown>(
  profileIdOrCode: string,
  params?: GetAllFollowersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFollowers>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllFollowersQueryOptions(profileIdOrCode, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏÇ¨Ïö©ÏûêÏùò idÎÇò ÏΩîÎìúÎ°ú Îì±Î°ùÎêú Î™®Îì† ÏïÑÏù¥ Î¶¨Ïä§Ìä∏Î•º ÏñªÏäµÎãàÎã§.
 * @summary (ÎÇ¥Î∂Ä ÏÇ¨Ïö©Ïö©)ÏÇ¨Ïö©ÏûêÍ∞Ä Îì±Î°ùÌïú Î™®Îì† ÏïÑÏù¥ Ï°∞Ìöå
 */
export const getEveryStudents = (
  idOrCode: string,
  params?: GetEveryStudentsParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListStudentResult>(
    { url: `/member/v1/profile/${idOrCode}/every-students`, method: 'GET', params, signal },
    options,
  );
};

export const getGetEveryStudentsQueryKey = (idOrCode: string, params?: GetEveryStudentsParams) => {
  return [`/member/v1/profile/${idOrCode}/every-students`, ...(params ? [params] : [])] as const;
};

export const getGetEveryStudentsQueryOptions = <TData = Awaited<ReturnType<typeof getEveryStudents>>, TError = unknown>(
  idOrCode: string,
  params?: GetEveryStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEveryStudentsQueryKey(idOrCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEveryStudents>>> = ({ signal }) =>
    getEveryStudents(idOrCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEveryStudents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEveryStudentsQueryResult = NonNullable<Awaited<ReturnType<typeof getEveryStudents>>>;
export type GetEveryStudentsQueryError = unknown;

export function useGetEveryStudents<TData = Awaited<ReturnType<typeof getEveryStudents>>, TError = unknown>(
  idOrCode: string,
  params: undefined | GetEveryStudentsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEveryStudents<TData = Awaited<ReturnType<typeof getEveryStudents>>, TError = unknown>(
  idOrCode: string,
  params?: GetEveryStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEveryStudents<TData = Awaited<ReturnType<typeof getEveryStudents>>, TError = unknown>(
  idOrCode: string,
  params?: GetEveryStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary (ÎÇ¥Î∂Ä ÏÇ¨Ïö©Ïö©)ÏÇ¨Ïö©ÏûêÍ∞Ä Îì±Î°ùÌïú Î™®Îì† ÏïÑÏù¥ Ï°∞Ìöå
 */

export function useGetEveryStudents<TData = Awaited<ReturnType<typeof getEveryStudents>>, TError = unknown>(
  idOrCode: string,
  params?: GetEveryStudentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEveryStudents>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEveryStudentsQueryOptions(idOrCode, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏÇ¨Ïö©ÏûêÏùò idÎÇò ÏΩîÎìúÎ°ú Îì±Î°ùÎêú Î∞ò Î¶¨Ïä§Ìä∏Î•º ÏñªÏäµÎãàÎã§.
 * @summary ÏÇ¨Ïö©ÏûêÏùò Î∞ò Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const getEducationalClasses = (
  idOrCode: string,
  params?: GetEducationalClassesParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListEducationalClassResult>(
    { url: `/member/v1/profile/${idOrCode}/educational-classes`, method: 'GET', params, signal },
    options,
  );
};

export const getGetEducationalClassesQueryKey = (idOrCode: string, params?: GetEducationalClassesParams) => {
  return [`/member/v1/profile/${idOrCode}/educational-classes`, ...(params ? [params] : [])] as const;
};

export const getGetEducationalClassesQueryOptions = <
  TData = Awaited<ReturnType<typeof getEducationalClasses>>,
  TError = unknown,
>(
  idOrCode: string,
  params?: GetEducationalClassesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEducationalClassesQueryKey(idOrCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEducationalClasses>>> = ({ signal }) =>
    getEducationalClasses(idOrCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEducationalClasses>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEducationalClassesQueryResult = NonNullable<Awaited<ReturnType<typeof getEducationalClasses>>>;
export type GetEducationalClassesQueryError = unknown;

export function useGetEducationalClasses<TData = Awaited<ReturnType<typeof getEducationalClasses>>, TError = unknown>(
  idOrCode: string,
  params: undefined | GetEducationalClassesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalClasses<TData = Awaited<ReturnType<typeof getEducationalClasses>>, TError = unknown>(
  idOrCode: string,
  params?: GetEducationalClassesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalClasses<TData = Awaited<ReturnType<typeof getEducationalClasses>>, TError = unknown>(
  idOrCode: string,
  params?: GetEducationalClassesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÏÇ¨Ïö©ÏûêÏùò Î∞ò Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */

export function useGetEducationalClasses<TData = Awaited<ReturnType<typeof getEducationalClasses>>, TError = unknown>(
  idOrCode: string,
  params?: GetEducationalClassesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalClasses>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEducationalClassesQueryOptions(idOrCode, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏÇ¨Ïö©ÏûêÏùò idÎÇò ÏΩîÎìúÎ°ú Îì±Î°ùÎêú Í∏∞Î≥∏Î∞ò Ï†ïÎ≥¥Î•º ÏñªÏäµÎãàÎã§.
 * @summary ÏÇ¨Ïö©ÏûêÏùò Í∏∞Î≥∏Î∞ò Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getBasicEducationalClass = (
  idOrCode: string,
  params?: GetBasicEducationalClassParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseEducationalClassResult>(
    { url: `/member/v1/profile/${idOrCode}/basic-educational-class`, method: 'GET', params, signal },
    options,
  );
};

export const getGetBasicEducationalClassQueryKey = (idOrCode: string, params?: GetBasicEducationalClassParams) => {
  return [`/member/v1/profile/${idOrCode}/basic-educational-class`, ...(params ? [params] : [])] as const;
};

export const getGetBasicEducationalClassQueryOptions = <
  TData = Awaited<ReturnType<typeof getBasicEducationalClass>>,
  TError = unknown,
>(
  idOrCode: string,
  params?: GetBasicEducationalClassParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBasicEducationalClassQueryKey(idOrCode, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBasicEducationalClass>>> = ({ signal }) =>
    getBasicEducationalClass(idOrCode, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBasicEducationalClass>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetBasicEducationalClassQueryResult = NonNullable<Awaited<ReturnType<typeof getBasicEducationalClass>>>;
export type GetBasicEducationalClassQueryError = unknown;

export function useGetBasicEducationalClass<
  TData = Awaited<ReturnType<typeof getBasicEducationalClass>>,
  TError = unknown,
>(
  idOrCode: string,
  params: undefined | GetBasicEducationalClassParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetBasicEducationalClass<
  TData = Awaited<ReturnType<typeof getBasicEducationalClass>>,
  TError = unknown,
>(
  idOrCode: string,
  params?: GetBasicEducationalClassParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetBasicEducationalClass<
  TData = Awaited<ReturnType<typeof getBasicEducationalClass>>,
  TError = unknown,
>(
  idOrCode: string,
  params?: GetBasicEducationalClassParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÏÇ¨Ïö©ÏûêÏùò Í∏∞Î≥∏Î∞ò Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetBasicEducationalClass<
  TData = Awaited<ReturnType<typeof getBasicEducationalClass>>,
  TError = unknown,
>(
  idOrCode: string,
  params?: GetBasicEducationalClassParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getBasicEducationalClass>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetBasicEducationalClassQueryOptions(idOrCode, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌîÑÎ°úÌïÑÎ™ÖÏúºÎ°ú Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùÑÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§. ÏÇ¨Ïö©Ï§ëÏù∏ ÌîÑÎ°úÎ∞ÄÎ™ÖÏù¥Î©¥ true, ÏïÑÎãàÎ©¥ falseÎ•º Î∞òÌôòÌï©ÎãàÎã§. (false = ÏÇ¨Ïö©Í∞ÄÎä•Ìïú ÌîÑÎ°úÌïÑÎ™Ö)
 * @summary (Í∞ÄÏûÖÏö©)ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */
export const existedByNameV2 = (
  name: string,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseBoolean>(
    { url: `/member/open-api/v2/profiles/existed-by-name/${name}`, method: 'GET', signal },
    options,
  );
};

export const getExistedByNameV2QueryKey = (name: string) => {
  return [`/member/open-api/v2/profiles/existed-by-name/${name}`] as const;
};

export const getExistedByNameV2QueryOptions = <TData = Awaited<ReturnType<typeof existedByNameV2>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExistedByNameV2QueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof existedByNameV2>>> = ({ signal }) =>
    existedByNameV2(name, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof existedByNameV2>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ExistedByNameV2QueryResult = NonNullable<Awaited<ReturnType<typeof existedByNameV2>>>;
export type ExistedByNameV2QueryError = unknown;

export function useExistedByNameV2<TData = Awaited<ReturnType<typeof existedByNameV2>>, TError = unknown>(
  name: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useExistedByNameV2<TData = Awaited<ReturnType<typeof existedByNameV2>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useExistedByNameV2<TData = Awaited<ReturnType<typeof existedByNameV2>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary (Í∞ÄÏûÖÏö©)ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */

export function useExistedByNameV2<TData = Awaited<ReturnType<typeof existedByNameV2>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByNameV2>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getExistedByNameV2QueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï¥àÎåÄÏû•Ïùò idÎÇò ÏΩîÎìúÎ°ú Ï¥àÎåÄÏû• Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§. isValidÍ∞Ä falseÎ©¥ ÏÇ¨Ïö© Î∂àÍ∞ÄÎä•Ìïú Ï¥àÎåÄ ÏûÖÎãàÎã§. (Ïù¥ÎØ∏ ÏÇ¨Ïö©Îêú Ï¥àÎåÄ)
 * @summary Ï¥àÎåÄÏû• Ï†ïÎ≥¥ Ï°∞Ìöå(ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ÍπåÏßÄ ÏùëÎãµ)
 */
export const getByIdOrCodeV21 = (
  idOrCode: string,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseInvitationV2Result>(
    { url: `/member/open-api/v2/invitations/${idOrCode}`, method: 'GET', signal },
    options,
  );
};

export const getGetByIdOrCodeV21QueryKey = (idOrCode: string) => {
  return [`/member/open-api/v2/invitations/${idOrCode}`] as const;
};

export const getGetByIdOrCodeV21QueryOptions = <TData = Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdOrCodeV21QueryKey(idOrCode);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByIdOrCodeV21>>> = ({ signal }) =>
    getByIdOrCodeV21(idOrCode, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!idOrCode, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByIdOrCodeV21>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByIdOrCodeV21QueryResult = NonNullable<Awaited<ReturnType<typeof getByIdOrCodeV21>>>;
export type GetByIdOrCodeV21QueryError = unknown;

export function useGetByIdOrCodeV21<TData = Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError = unknown>(
  idOrCode: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCodeV21<TData = Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByIdOrCodeV21<TData = Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ï¥àÎåÄÏû• Ï†ïÎ≥¥ Ï°∞Ìöå(ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ÍπåÏßÄ ÏùëÎãµ)
 */

export function useGetByIdOrCodeV21<TData = Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError = unknown>(
  idOrCode: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByIdOrCodeV21>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByIdOrCodeV21QueryOptions(idOrCode, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ìï∏ÎìúÌè∞ Î≤àÌò∏Î°ú ÌöåÏõêÏ†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§. (ÏïÑÏù¥ÎîîÎ°ú Ï°∞ÌöåÎäî v1Ïóê ÏûàÏùå)
 * @summary Ï†ÑÌôîÎ≤àÌò∏Î°ú ÌöåÏõêÏ†ïÎ≥¥ Ï°∞Ìöå
 */
export const getByPhoneNumber1 = (
  params?: GetByPhoneNumber1Params,
  phoneNumber: string = '01287163525',
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAccountResultV2>(
    { url: `/member/open-api/v2/accounts/${phoneNumber}`, method: 'GET', params, signal },
    options,
  );
};

export const getGetByPhoneNumber1QueryKey = (params?: GetByPhoneNumber1Params, phoneNumber: string = '01287163525') => {
  return [`/member/open-api/v2/accounts/${phoneNumber}`, ...(params ? [params] : [])] as const;
};

export const getGetByPhoneNumber1QueryOptions = <
  TData = Awaited<ReturnType<typeof getByPhoneNumber1>>,
  TError = unknown,
>(
  params?: GetByPhoneNumber1Params,
  phoneNumber: string = '01287163525',
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByPhoneNumber1QueryKey(params, phoneNumber);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByPhoneNumber1>>> = ({ signal }) =>
    getByPhoneNumber1(params, phoneNumber, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!phoneNumber, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByPhoneNumber1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByPhoneNumber1QueryResult = NonNullable<Awaited<ReturnType<typeof getByPhoneNumber1>>>;
export type GetByPhoneNumber1QueryError = unknown;

export function useGetByPhoneNumber1<TData = Awaited<ReturnType<typeof getByPhoneNumber1>>, TError = unknown>(
  params: undefined | GetByPhoneNumber1Params,
  phoneNumber: undefined | string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByPhoneNumber1<TData = Awaited<ReturnType<typeof getByPhoneNumber1>>, TError = unknown>(
  params?: GetByPhoneNumber1Params,
  phoneNumber?: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByPhoneNumber1<TData = Awaited<ReturnType<typeof getByPhoneNumber1>>, TError = unknown>(
  params?: GetByPhoneNumber1Params,
  phoneNumber?: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ï†ÑÌôîÎ≤àÌò∏Î°ú ÌöåÏõêÏ†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetByPhoneNumber1<TData = Awaited<ReturnType<typeof getByPhoneNumber1>>, TError = unknown>(
  params?: GetByPhoneNumber1Params,
  phoneNumber: string = '01287163525',
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getByPhoneNumber1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetByPhoneNumber1QueryOptions(params, phoneNumber, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏÑúÎπÑÏä§ÏóêÏÑú ÏÇ¨Ïö©ÏûêÎ•º ÌîÑÎ°úÌïÑÎ™ÖÏúºÎ°ú Ï°∞ÌöåÌï† Îïå ÏÇ¨Ïö©Ìï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå(startsWith Í≤ÄÏÉâ)
 */
export const startedWithName1 = (
  name: string,
  params?: StartedWithName1Params,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListProfileResult>(
    { url: `/member/open-api/v1/profiles/started-with-name/${name}`, method: 'GET', params, signal },
    options,
  );
};

export const getStartedWithName1QueryKey = (name: string, params?: StartedWithName1Params) => {
  return [`/member/open-api/v1/profiles/started-with-name/${name}`, ...(params ? [params] : [])] as const;
};

export const getStartedWithName1QueryOptions = <TData = Awaited<ReturnType<typeof startedWithName1>>, TError = unknown>(
  name: string,
  params?: StartedWithName1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getStartedWithName1QueryKey(name, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof startedWithName1>>> = ({ signal }) =>
    startedWithName1(name, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof startedWithName1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type StartedWithName1QueryResult = NonNullable<Awaited<ReturnType<typeof startedWithName1>>>;
export type StartedWithName1QueryError = unknown;

export function useStartedWithName1<TData = Awaited<ReturnType<typeof startedWithName1>>, TError = unknown>(
  name: string,
  params: undefined | StartedWithName1Params,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useStartedWithName1<TData = Awaited<ReturnType<typeof startedWithName1>>, TError = unknown>(
  name: string,
  params?: StartedWithName1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useStartedWithName1<TData = Awaited<ReturnType<typeof startedWithName1>>, TError = unknown>(
  name: string,
  params?: StartedWithName1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå(startsWith Í≤ÄÏÉâ)
 */

export function useStartedWithName1<TData = Awaited<ReturnType<typeof startedWithName1>>, TError = unknown>(
  name: string,
  params?: StartedWithName1Params,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof startedWithName1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStartedWithName1QueryOptions(name, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌîÑÎ°úÌïÑÎ™ÖÏúºÎ°ú Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùÑÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
 * @summary (Í∞ÄÏûÖÏö©)ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */
export const existedByName1 = (name: string, options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseString>(
    { url: `/member/open-api/v1/profiles/existed-by-name/${name}`, method: 'GET', signal },
    options,
  );
};

export const getExistedByName1QueryKey = (name: string) => {
  return [`/member/open-api/v1/profiles/existed-by-name/${name}`] as const;
};

export const getExistedByName1QueryOptions = <TData = Awaited<ReturnType<typeof existedByName1>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExistedByName1QueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof existedByName1>>> = ({ signal }) =>
    existedByName1(name, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof existedByName1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ExistedByName1QueryResult = NonNullable<Awaited<ReturnType<typeof existedByName1>>>;
export type ExistedByName1QueryError = unknown;

export function useExistedByName1<TData = Awaited<ReturnType<typeof existedByName1>>, TError = unknown>(
  name: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useExistedByName1<TData = Awaited<ReturnType<typeof existedByName1>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useExistedByName1<TData = Awaited<ReturnType<typeof existedByName1>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary (Í∞ÄÏûÖÏö©)ÌîÑÎ°úÌïÑÎ™Ö Ï°∞Ìöå
 */

export function useExistedByName1<TData = Awaited<ReturnType<typeof existedByName1>>, TError = unknown>(
  name: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof existedByName1>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getExistedByName1QueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌåîÎ°úÏö∞Î•º Ï∑®ÏÜåÌï©ÎãàÎã§.(Ïñ∏ÌåîÌï©ÎãàÎã§.)
 * @summary ÌåîÎ°úÏö∞ Ï∑®ÏÜå
 */
export const unFollow = (
  profileIdOrCode: string,
  unfollowRequest: UnfollowRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/v1/profile/${profileIdOrCode}/unfollow`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: unfollowRequest,
    },
    options,
  );
};

export const getUnFollowMutationOptions = <
  TData = Awaited<ReturnType<typeof unFollow>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: UnfollowRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['unFollow'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unFollow>>,
    { profileIdOrCode: string; data: UnfollowRequest }
  > = (props) => {
    const { profileIdOrCode, data } = props ?? {};

    return unFollow(profileIdOrCode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { profileIdOrCode: string; data: UnfollowRequest },
    TContext
  >;
};

export type UnFollowMutationResult = NonNullable<Awaited<ReturnType<typeof unFollow>>>;
export type UnFollowMutationBody = UnfollowRequest;
export type UnFollowMutationError = unknown;

/**
 * @summary ÌåîÎ°úÏö∞ Ï∑®ÏÜå
 */
export const useUnFollow = <
  TData = Awaited<ReturnType<typeof unFollow>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: UnfollowRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { profileIdOrCode: string; data: UnfollowRequest }, TContext> => {
  const mutationOptions = getUnFollowMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * ÏÉÅÎåÄÏùò ÌåîÎ°úÏö∞Î•º Í∞ïÏ†úÎ°ú Ìï¥Ï†úÌï©ÎãàÎã§.(Í∞ïÏ†ú Ïñ∏Ìåî)
 * @summary Í∞ïÏ†ú ÌåîÎ°úÏö∞ Ìï¥Ï†ú(ÏÇ≠Ï†ú)
 */
export const forceUnFollow = (
  profileIdOrCode: string,
  forceUnfollowRequest: ForceUnfollowRequest,
  options?: SecondParameter<typeof customFetcher>,
) => {
  return customFetcher<ApiResponseString>(
    {
      url: `/member/v1/profile/${profileIdOrCode}/following/unfollow`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: forceUnfollowRequest,
    },
    options,
  );
};

export const getForceUnFollowMutationOptions = <
  TData = Awaited<ReturnType<typeof forceUnFollow>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: ForceUnfollowRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['forceUnFollow'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof forceUnFollow>>,
    { profileIdOrCode: string; data: ForceUnfollowRequest }
  > = (props) => {
    const { profileIdOrCode, data } = props ?? {};

    return forceUnFollow(profileIdOrCode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { profileIdOrCode: string; data: ForceUnfollowRequest },
    TContext
  >;
};

export type ForceUnFollowMutationResult = NonNullable<Awaited<ReturnType<typeof forceUnFollow>>>;
export type ForceUnFollowMutationBody = ForceUnfollowRequest;
export type ForceUnFollowMutationError = unknown;

/**
 * @summary Í∞ïÏ†ú ÌåîÎ°úÏö∞ Ìï¥Ï†ú(ÏÇ≠Ï†ú)
 */
export const useForceUnFollow = <
  TData = Awaited<ReturnType<typeof forceUnFollow>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { profileIdOrCode: string; data: ForceUnfollowRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { profileIdOrCode: string; data: ForceUnfollowRequest }, TContext> => {
  const mutationOptions = getForceUnFollowMutationOptions(options);

  return useMutation(mutationOptions);
};
