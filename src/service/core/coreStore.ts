/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Core API
 * isd / kinder board api doc
 * OpenAPI spec version: v1.1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  ApiResponseAbusingReportResult,
  ApiResponseListAbusingReportOptionResult,
  ApiResponseListBasicProfilePhotoResult,
  ApiResponseListMyBannerResult,
  ApiResponseListTaskExampleResult,
  ApiResponseServiceBannerResult,
  CreateAbusingReportRequest,
  GetAllOptionsParams,
} from './schemas';
import { customFetcher } from '../custom-fetcher';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * 신고 내용을 등록합니다.
 * @summary 신고 접수
 */
export const createAbusingReport = (
  createAbusingReportRequest: CreateAbusingReportRequest,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseAbusingReportResult>(
    {
      url: `/core/v1/abusing-reports`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAbusingReportRequest,
      signal,
    },
    options,
  );
};

export const getCreateAbusingReportMutationOptions = <
  TData = Awaited<ReturnType<typeof createAbusingReport>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: CreateAbusingReportRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const mutationKey = ['createAbusingReport'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAbusingReport>>,
    { data: CreateAbusingReportRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createAbusingReport(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: CreateAbusingReportRequest },
    TContext
  >;
};

export type CreateAbusingReportMutationResult = NonNullable<Awaited<ReturnType<typeof createAbusingReport>>>;
export type CreateAbusingReportMutationBody = CreateAbusingReportRequest;
export type CreateAbusingReportMutationError = unknown;

/**
 * @summary 신고 접수
 */
export const useCreateAbusingReport = <
  TData = Awaited<ReturnType<typeof createAbusingReport>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: CreateAbusingReportRequest }, TContext>;
  request?: SecondParameter<typeof customFetcher>;
}): UseMutationResult<TData, TError, { data: CreateAbusingReportRequest }, TContext> => {
  const mutationOptions = getCreateAbusingReportMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * 서버에서 설정한 작업 예시 목록을 조회합니다.
 * @summary 작업 예시 리스트 조회
 */
export const getExample = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseListTaskExampleResult>(
    { url: `/core/v1/task-example`, method: 'GET', signal },
    options,
  );
};

export const getGetExampleQueryKey = () => {
  return [`/core/v1/task-example`] as const;
};

export const getGetExampleQueryOptions = <TData = Awaited<ReturnType<typeof getExample>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetExampleQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExample>>> = ({ signal }) =>
    getExample(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExample>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetExampleQueryResult = NonNullable<Awaited<ReturnType<typeof getExample>>>;
export type GetExampleQueryError = unknown;

export function useGetExample<TData = Awaited<ReturnType<typeof getExample>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetExample<TData = Awaited<ReturnType<typeof getExample>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetExample<TData = Awaited<ReturnType<typeof getExample>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 작업 예시 리스트 조회
 */

export function useGetExample<TData = Awaited<ReturnType<typeof getExample>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetExampleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 서버에서 설정한 기본 사진들을 조회합니다.
 * @summary 기본 프로필 사진 리스트 조회
 */
export const getAllPhotos = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseListBasicProfilePhotoResult>(
    { url: `/core/v1/basic-profile-photo`, method: 'GET', signal },
    options,
  );
};

export const getGetAllPhotosQueryKey = () => {
  return [`/core/v1/basic-profile-photo`] as const;
};

export const getGetAllPhotosQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllPhotos>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllPhotosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPhotos>>> = ({ signal }) =>
    getAllPhotos(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllPhotos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllPhotosQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPhotos>>>;
export type GetAllPhotosQueryError = unknown;

export function useGetAllPhotos<TData = Awaited<ReturnType<typeof getAllPhotos>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllPhotos<TData = Awaited<ReturnType<typeof getAllPhotos>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllPhotos<TData = Awaited<ReturnType<typeof getAllPhotos>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 기본 프로필 사진 리스트 조회
 */

export function useGetAllPhotos<TData = Awaited<ReturnType<typeof getAllPhotos>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPhotos>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllPhotosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 작업보드용 베너 링크를 조회합니다.
 * @summary 작업보드 배너 조회
 */
export const getTaskBanner = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseServiceBannerResult>({ url: `/core/v1/banner/task`, method: 'GET', signal }, options);
};

export const getGetTaskBannerQueryKey = () => {
  return [`/core/v1/banner/task`] as const;
};

export const getGetTaskBannerQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskBanner>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTaskBannerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskBanner>>> = ({ signal }) =>
    getTaskBanner(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTaskBanner>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetTaskBannerQueryResult = NonNullable<Awaited<ReturnType<typeof getTaskBanner>>>;
export type GetTaskBannerQueryError = unknown;

export function useGetTaskBanner<TData = Awaited<ReturnType<typeof getTaskBanner>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetTaskBanner<TData = Awaited<ReturnType<typeof getTaskBanner>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetTaskBanner<TData = Awaited<ReturnType<typeof getTaskBanner>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 작업보드 배너 조회
 */

export function useGetTaskBanner<TData = Awaited<ReturnType<typeof getTaskBanner>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetTaskBannerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 자료보드에 설정할 배너 리스트를 조회합니다.
 * @summary 마이보드 배너 목록 조회
 */
export const getMyBoardBanners = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseListMyBannerResult>(
    { url: `/core/v1/banner/my-board`, method: 'GET', signal },
    options,
  );
};

export const getGetMyBoardBannersQueryKey = () => {
  return [`/core/v1/banner/my-board`] as const;
};

export const getGetMyBoardBannersQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyBoardBanners>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyBoardBannersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyBoardBanners>>> = ({ signal }) =>
    getMyBoardBanners(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyBoardBanners>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMyBoardBannersQueryResult = NonNullable<Awaited<ReturnType<typeof getMyBoardBanners>>>;
export type GetMyBoardBannersQueryError = unknown;

export function useGetMyBoardBanners<TData = Awaited<ReturnType<typeof getMyBoardBanners>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMyBoardBanners<
  TData = Awaited<ReturnType<typeof getMyBoardBanners>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMyBoardBanners<
  TData = Awaited<ReturnType<typeof getMyBoardBanners>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 마이보드 배너 목록 조회
 */

export function useGetMyBoardBanners<
  TData = Awaited<ReturnType<typeof getMyBoardBanners>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetMyBoardBannersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 메인화면용 베너 링크를 조회합니다.
 * @summary 메인화면(서비스소개?) 배너 조회
 */
export const getMainBanner = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseServiceBannerResult>({ url: `/core/v1/banner/main`, method: 'GET', signal }, options);
};

export const getGetMainBannerQueryKey = () => {
  return [`/core/v1/banner/main`] as const;
};

export const getGetMainBannerQueryOptions = <
  TData = Awaited<ReturnType<typeof getMainBanner>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMainBannerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMainBanner>>> = ({ signal }) =>
    getMainBanner(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMainBanner>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMainBannerQueryResult = NonNullable<Awaited<ReturnType<typeof getMainBanner>>>;
export type GetMainBannerQueryError = unknown;

export function useGetMainBanner<TData = Awaited<ReturnType<typeof getMainBanner>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMainBanner<TData = Awaited<ReturnType<typeof getMainBanner>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMainBanner<TData = Awaited<ReturnType<typeof getMainBanner>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 메인화면(서비스소개?) 배너 조회
 */

export function useGetMainBanner<TData = Awaited<ReturnType<typeof getMainBanner>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetMainBannerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 자료보드 베너 링크를 조회합니다.
 * @summary 자료보드 배너 조회
 */
export const getEducationalDataBanner = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseServiceBannerResult>(
    { url: `/core/v1/banner/educational-data`, method: 'GET', signal },
    options,
  );
};

export const getGetEducationalDataBannerQueryKey = () => {
  return [`/core/v1/banner/educational-data`] as const;
};

export const getGetEducationalDataBannerQueryOptions = <
  TData = Awaited<ReturnType<typeof getEducationalDataBanner>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEducationalDataBannerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEducationalDataBanner>>> = ({ signal }) =>
    getEducationalDataBanner(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEducationalDataBanner>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEducationalDataBannerQueryResult = NonNullable<Awaited<ReturnType<typeof getEducationalDataBanner>>>;
export type GetEducationalDataBannerQueryError = unknown;

export function useGetEducationalDataBanner<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner>>,
  TError = unknown,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalDataBanner<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalDataBanner<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 자료보드 배너 조회
 */

export function useGetEducationalDataBanner<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEducationalDataBannerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 신고 선택지 정보로 목록을 조회합니다.
 * @summary 신고 선택지 목록 조회
 */
export const getAllOptions = (
  params?: GetAllOptionsParams,
  options?: SecondParameter<typeof customFetcher>,
  signal?: AbortSignal,
) => {
  return customFetcher<ApiResponseListAbusingReportOptionResult>(
    { url: `/core/v1/abusing-report/options`, method: 'GET', params, signal },
    options,
  );
};

export const getGetAllOptionsQueryKey = (params?: GetAllOptionsParams) => {
  return [`/core/v1/abusing-report/options`, ...(params ? [params] : [])] as const;
};

export const getGetAllOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getAllOptions>>, TError = unknown>(
  params?: GetAllOptionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllOptionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOptions>>> = ({ signal }) =>
    getAllOptions(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllOptions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllOptions>>>;
export type GetAllOptionsQueryError = unknown;

export function useGetAllOptions<TData = Awaited<ReturnType<typeof getAllOptions>>, TError = unknown>(
  params: undefined | GetAllOptionsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllOptions<TData = Awaited<ReturnType<typeof getAllOptions>>, TError = unknown>(
  params?: GetAllOptionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllOptions<TData = Awaited<ReturnType<typeof getAllOptions>>, TError = unknown>(
  params?: GetAllOptionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 신고 선택지 목록 조회
 */

export function useGetAllOptions<TData = Awaited<ReturnType<typeof getAllOptions>>, TError = unknown>(
  params?: GetAllOptionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOptions>>, TError, TData>>;
    request?: SecondParameter<typeof customFetcher>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllOptionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 서버에서 설정한 작업 예시 목록을 조회합니다.
 * @summary 작업 예시 리스트 조회
 */
export const getExample1 = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseListTaskExampleResult>(
    { url: `/core/open-api/v1/task-example`, method: 'GET', signal },
    options,
  );
};

export const getGetExample1QueryKey = () => {
  return [`/core/open-api/v1/task-example`] as const;
};

export const getGetExample1QueryOptions = <
  TData = Awaited<ReturnType<typeof getExample1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetExample1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExample1>>> = ({ signal }) =>
    getExample1(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExample1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetExample1QueryResult = NonNullable<Awaited<ReturnType<typeof getExample1>>>;
export type GetExample1QueryError = unknown;

export function useGetExample1<TData = Awaited<ReturnType<typeof getExample1>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetExample1<TData = Awaited<ReturnType<typeof getExample1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetExample1<TData = Awaited<ReturnType<typeof getExample1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 작업 예시 리스트 조회
 */

export function useGetExample1<TData = Awaited<ReturnType<typeof getExample1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExample1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetExample1QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 작업보드용 베너 링크를 조회합니다.
 * @summary 작업보드 배너 조회
 */
export const getTaskBanner1 = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseServiceBannerResult>(
    { url: `/core/open-api/v1/banner/task`, method: 'GET', signal },
    options,
  );
};

export const getGetTaskBanner1QueryKey = () => {
  return [`/core/open-api/v1/banner/task`] as const;
};

export const getGetTaskBanner1QueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskBanner1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTaskBanner1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskBanner1>>> = ({ signal }) =>
    getTaskBanner1(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTaskBanner1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetTaskBanner1QueryResult = NonNullable<Awaited<ReturnType<typeof getTaskBanner1>>>;
export type GetTaskBanner1QueryError = unknown;

export function useGetTaskBanner1<TData = Awaited<ReturnType<typeof getTaskBanner1>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetTaskBanner1<TData = Awaited<ReturnType<typeof getTaskBanner1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetTaskBanner1<TData = Awaited<ReturnType<typeof getTaskBanner1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 작업보드 배너 조회
 */

export function useGetTaskBanner1<TData = Awaited<ReturnType<typeof getTaskBanner1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTaskBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetTaskBanner1QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 자료보드에 설정할 배너 리스트를 조회합니다.
 * @summary 마이보드 배너 목록 조회
 */
export const getMyBoardBanners1 = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseListMyBannerResult>(
    { url: `/core/open-api/v1/banner/my-board`, method: 'GET', signal },
    options,
  );
};

export const getGetMyBoardBanners1QueryKey = () => {
  return [`/core/open-api/v1/banner/my-board`] as const;
};

export const getGetMyBoardBanners1QueryOptions = <
  TData = Awaited<ReturnType<typeof getMyBoardBanners1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyBoardBanners1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyBoardBanners1>>> = ({ signal }) =>
    getMyBoardBanners1(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyBoardBanners1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMyBoardBanners1QueryResult = NonNullable<Awaited<ReturnType<typeof getMyBoardBanners1>>>;
export type GetMyBoardBanners1QueryError = unknown;

export function useGetMyBoardBanners1<
  TData = Awaited<ReturnType<typeof getMyBoardBanners1>>,
  TError = unknown,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMyBoardBanners1<
  TData = Awaited<ReturnType<typeof getMyBoardBanners1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMyBoardBanners1<
  TData = Awaited<ReturnType<typeof getMyBoardBanners1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 마이보드 배너 목록 조회
 */

export function useGetMyBoardBanners1<
  TData = Awaited<ReturnType<typeof getMyBoardBanners1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyBoardBanners1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetMyBoardBanners1QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 메인화면용 베너 링크를 조회합니다.
 * @summary 메인화면(서비스소개?) 배너 조회
 */
export const getMainBanner1 = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseServiceBannerResult>(
    { url: `/core/open-api/v1/banner/main`, method: 'GET', signal },
    options,
  );
};

export const getGetMainBanner1QueryKey = () => {
  return [`/core/open-api/v1/banner/main`] as const;
};

export const getGetMainBanner1QueryOptions = <
  TData = Awaited<ReturnType<typeof getMainBanner1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMainBanner1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMainBanner1>>> = ({ signal }) =>
    getMainBanner1(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMainBanner1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMainBanner1QueryResult = NonNullable<Awaited<ReturnType<typeof getMainBanner1>>>;
export type GetMainBanner1QueryError = unknown;

export function useGetMainBanner1<TData = Awaited<ReturnType<typeof getMainBanner1>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMainBanner1<TData = Awaited<ReturnType<typeof getMainBanner1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMainBanner1<TData = Awaited<ReturnType<typeof getMainBanner1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 메인화면(서비스소개?) 배너 조회
 */

export function useGetMainBanner1<TData = Awaited<ReturnType<typeof getMainBanner1>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMainBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetMainBanner1QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 자료보드 베너 링크를 조회합니다.
 * @summary 자료보드 배너 조회
 */
export const getEducationalDataBanner1 = (options?: SecondParameter<typeof customFetcher>, signal?: AbortSignal) => {
  return customFetcher<ApiResponseServiceBannerResult>(
    { url: `/core/open-api/v1/banner/educational-data`, method: 'GET', signal },
    options,
  );
};

export const getGetEducationalDataBanner1QueryKey = () => {
  return [`/core/open-api/v1/banner/educational-data`] as const;
};

export const getGetEducationalDataBanner1QueryOptions = <
  TData = Awaited<ReturnType<typeof getEducationalDataBanner1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEducationalDataBanner1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEducationalDataBanner1>>> = ({ signal }) =>
    getEducationalDataBanner1(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 60000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEducationalDataBanner1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetEducationalDataBanner1QueryResult = NonNullable<Awaited<ReturnType<typeof getEducationalDataBanner1>>>;
export type GetEducationalDataBanner1QueryError = unknown;

export function useGetEducationalDataBanner1<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner1>>,
  TError = unknown,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof customFetcher>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalDataBanner1<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetEducationalDataBanner1<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary 자료보드 배너 조회
 */

export function useGetEducationalDataBanner1<
  TData = Awaited<ReturnType<typeof getEducationalDataBanner1>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEducationalDataBanner1>>, TError, TData>>;
  request?: SecondParameter<typeof customFetcher>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetEducationalDataBanner1QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
